#+TITLE: 编程学习笔记
* Linux
** C-S t 打开新终端标签
** Install software
  | Num | Software | Download Site                       |
  |-----+----------+-------------------------------------|
  |   1 | Eclipse  | http://software.opensuse.org/search |
  |   2 | smplayer | http://software.opensuse.org/search |
  |   3 | WPS      | 官网                                |
** 《Unix & Linux大学教程》
*** 第10章 命令语法
1. 多个命令用;隔开
2. 命令格式为：命令名称 -选项 参数，其中-后加单独字母选项，--后加单词选项，-r
   与--reverse作用相同，注意通常选项必须位于参数之前
3. -后的选项可以组合使用，并且与顺序无关，这是基本的Unix文化
4. 两个重要命令：--help及--version 
5. 命令的每个部分之间必须至少有一个空格或者制表符（Unix中文件名及命令名不能使
   用空格）
6. 7条规则（前5条是基本项）
   | 序号 | 规则                                                                 |
   |------+----------------------------------------------------------------------|
   |    1 | 方括号中的项是可选的                                                 |
   |    2 | 不在方括号中的项是必选项，必须作为命令的一部分输入                   |
   |    3 | 黑体字必须按原样准确键入                                             |
   |    4 | 斜体字必须用适当的值代替                                             |
   |    5 | 后面接省略号（...）的参数可以重复任意多次                            |
   |    6 | 如果一个单独的选项和一个参数组合在一起，那么该选项和参数必须同时使用 |
   |    7 | 由竖线字符分开的两个或多个项，表示可以从这个列表中选择一个项         |
  
*** 第11章 Shell
 1. 查看系统上安装了那些Shell： less /etc/shells
 2. 显示当前Shell名称： echo $SHELL
 3. 改变登陆shell： chsh [-s shell] [userid],其中userid是用户标识，shell是新登
    录shell的路径名。改变登录shell时，修改的是/etc/passwd文件。
*** 第12章 使用shell：变量和选项
**** 交互式shell和非交互式shell
1. shell既可以充当用户界面（交互式程序），也可以作为脚本解释器（非交互式程序）。
2. 登录是默认启动交互式的，运行shell脚本时默认启动非交互式。
**** 环境、进程和变量
1. Unix shell中有2种不同类型的变量：shell变量和环境变量
2. 变量只有4种不同类型的操作：创建变量、查看变量的值、修改变量的值以及销毁变量。
3. shell变量几乎总是存储一种类型的数据，即字符串，也就是一串纯文本字符。
4. 在子进程创建时，系统为子进程复制了父进程的环境。这意味着父进程可以访问的全
   部环境变量，现在子进程也可以访问。
**** 环境变量和shell变量
1. 环境变量对所有进程可用，所以它们是全局变量。
2. shell变量是创建它们的shell的局部变量。局部（shell）变量有两种方式使用：第一
   种，它们可能用来存放对shell本身有意义的信息。第二种，shell变量在shell脚本中以
   普通程序中局部变量的使用方式使用-作为临时存储容器。
**** 显示环境变量：env、printenv
1. 显示默认变量：env及printenv, 每次一屏显示：env | less
2. 对输出进行排序：env | sort | less
**** 显示shell变量：set
**** 显示及使用变量的值：echo，print
1. 显示TERM的值：echo ${TERM} 或者echo $TERM(如果没有歧义)
2. 如果在变量NAME前加上美元符号$（如$TERM），即表示变量NAME的值
3. 显示The terminal type is xterm：echo The terminal type is $TERM
4. 为了防止shell解释"元字符"，需要将元字符包含在双引号中。如echo The
   terminal type is <$TERM>不能正常运行，必须echo "The terminal type is
   <$TERM>"，才能正常显示，因为<和>是元字符，表示"重定向"。
**** Bourne Shell家族使用变量：export、unset
1. 变量的值必须是字符串，创建变量的语法为：NAME=value，注意无空格
2. 如果希望使用一个包含有空白符的值，则需要双引号，如WEEDLY="a cool cat"
3. 每个新变量自动设置成shell变量，使用export命令将变量导出到环境中，如:export
   HARLEY WEEDLY，则HARLEY和WEEDLY变量同时由shell变量变为"shell+环境"变量
4. export命令允许同时设置变量并导出到环境中，语法为：export NAME[=value]，如
   export PAGER=less，此方法推荐。
5. export可以同时作用于多个变量，如:

   export PAGER=less EDITOR=vi PATH="/usr/local/bin:/usr/bin:/bin"
6. 删除(复位)变量，语法为：unset NAME...
**** shell选项：set -o、set +o
1. 设置一个选项：set -o option，如：set -o vi可以关闭emacs模式，启动vi模式
2. 复位一个选项：set +o option
**** 显示shell选项
1. 显示shell选项的当前值
   | set -o | 容易阅读的方式显示，适合人类阅读                |
   | set +o | 紧缩的方式显示相同信息，适合用作shell脚本的数据 |

*** 第13章 使用shell：命令和定制
**** 元字符
1. 引用元字符时将包含元字符的部分加双引号,如:echo "Let's go; Yes"
**** 引用和转义
1. 按字面意思解释字符（即引用字符）方法有3种：使用反斜线、使用一对单引号或者使
   用一对双引号
2. 使用反斜线引用单个字符，或者使用单引号引用一串字符
3. 使用双引号引用一串字符，但是保留$(美元)，`(反引号)和\(反斜线)的特殊含义
**** 强引用和弱引用
1. 单引号为强引用，双引号为弱引用
2. 反斜线是所有引用中最强的一个，甚至可以引用新行字符。
3. 与反斜线不同，单引号和双引号不引用新行字符。
**** shell内置命令：type
1. 使用type查看某条命令是否内部命令
**** 外部命令及搜索路径
1. 程序都存储在文件中，而每个文件都位于目录之中。
2. 搜索路径是包含外部命令的程序的目录列表，查看搜索路径：echo $PATH
3. /bin、/usr/bin存放系统中所有用户使用的程序，其位于所有的Unix系统上，并在
   Unix安装时自动设置。
4. 当shell需要查找外部命令时，它在搜索路径中按指定的顺序逐个检查每个目录。
5. 编写自己的脚本和程序，并将它们存放在自己的bin目录($HOME/bin)中，那么需要将
   这个目录名称添加到搜索路径中。命令如下：export PATH="$PATH:$HOME/bin"，此命
   令最后被搜索使用，如果希望被首先搜索则用：export PATH="$HOME/bin:$PATH"
**** shell提示
1. 修改shell提示需要修改名为PS1的环境变量。PS1意为"prompt for the shell,number
   1"
2. 使用变量替换：export PS1="${VARIABLE}$ "
3. 注意，如果该变量在使用时是变化的就使用强引用''（单引号）来防止$字符被解释，直至需要它
   们;否则，使用弱引用""（双引号），从而允许$字符被立即解释，以后维持此值不变。
**** 命令替换
1. 命令替换允许在一条命令中嵌入另一条命令。shell首先执行嵌入的命令，并且输出替
   换该命令，然后shell再执行整个命令。
2. 通过将一条命令封装在`（反引号）字符中，可以将它嵌入到另一条命令中。如：echo
   "The time and date are `date`."
3. 反引号字符只在命令替换中使用！
**** 历史列表
** opensuse
*** 主题安装路径为~/.local/share/plasma/desktoptheme，将压缩文件加载到此文件夹即可.
*** 壁纸路径为：~/.local/share
*** 软件升级：sudo zypper update
* Emacs
** org-mode
*** 常用操作快捷键
  | 快捷键         | 作用                                |
  |----------------+-------------------------------------|
  | Alt+Enter      | 新建同级标题                        |
  | Tab            | 折叠/翻开                           |
  | C-c C-e        | 输出为各种文件                      |
  | C-c -          | turn headline line to items         |
  | C-c *          | turn item into headine              |
  | S-up/down      | previous/next item?重要性ABC        |
  | M-up/down      | move item up/down                   |
  | M-left/right   | 升/降级列表项，不包括子项           |
  | M-S-left/right | 升/降级列表项，包括子项             |
  | C-c C-p/n      | 移动到上/下一标题                   |
  | C-c C-b/f      | 移动到和当前标题同等级的上/下一标题 |
  | C-c C-u        | 向上移动到更高一层的标题            |
  |----------------+-------------------------------------|

*** 正文换行
   有两个方法：
 1. 回车两次
 2. 末尾加"\\"(引号内)
*** 字体
 *粗体*  /斜体/  +删除线+   _下划线_   下标：H_2 O   上标：E=mc^2    等宽字体：=git=
*** 表格
 1. '|'开头，TAB键对齐
 2. 两行之间加'|-'，再按TAB键就会有这样的效果
 3. 快捷键如下：
    - 整体区域
     |---------+--------------------------------|
     | 操作    | 说明                           |
     |---------+--------------------------------|
     | Tab     | 移动到下一区域，必要时新建一行 |
     | S-Tab   | 移动到上一区域                 |
     | M-a/e   | 移动到本单元格的开头/结尾      |
     | RET     | 移动到下一行，必要时新建一行   |
     | C-c C-c | 调整表格，不移动光标           |
     | C-c bar | 创建或转化为表格，TMD咋用啊？  |
     |---------+--------------------------------|
    - 编辑行或列
     |----------------+----------------------------------|
     | 操作           | 说明                             |
     |----------------+----------------------------------|
     | M-left/right   | 移动列                           |
     | M-up/down      | 移动行                           |
     | M-S-left/right | 删除/插入列                      |
     | M-S-up/down    | 删除/掺入行                      |
     | C-c -          | 在本行下方添加水平分割线         |
     | C-u C-c -      | 在本行上方添加水平分割线         |
     | C-c RET        | 添加水平分割线并跳到下一行       |
     | C-c ^          | 根据当前列排序，可以选择排序方式 |
     | C-c `          | 在新窗口中编辑该单元格           |
     |----------------+----------------------------------|
*** 标题
**** 种类
 1. 无序列表以"-"、'+'或者'*'开头
 2. 有序列表以'1.'或者'1)'开头
 3. 描述列表用'::'
**** 注意事项
 + 列表符号后面都要有空格
 + 同级别的列表缩进要相同
 + 如果想要加入同级别的列表，可以M+RET
 + 空两行折后列表结束，如果空一行执行M-RET，实际上还是输入同级项
*** 插入代码
 1. <s, Tab
 2. 在光标后输入语言种类，如sh，java等
 3. C-c ',源码的缩进及对齐非常好用，在新的buffer中编辑也很方便
*** table-insert
*** "TODO" item
    :PROPERTIES:
    :Effort:   0:30
    :END:
    :LOGBOOK:
    CLOCK: [2016-08-12 五 12:42]--[2016-08-12 五 12:59] =>  0:17
    CLOCK: [2016-08-12 五 12:11]--[2016-08-12 五 12:23] =>  0:12
    CLOCK: [2016-08-02 二 12:04]--[2016-08-02 二 12:35] =>  0:31
    :END:
    #+BEGIN: clocktable :maxlevel 2 :scope subtree
    #+CAPTION: Clock summary at [2016-08-12 五 12:59]
    | Headline     | Time   |
    |--------------+--------|
    | *Total time* | *1:00* |
    |--------------+--------|
    #+END:
 1. Any headline starting with TODO become a TODO item.
 2. Important commands:
    | Command             | Effect                                                                 |
    |---------------------+------------------------------------------------------------------------|
    | C-c C-t             | Rotate the TODO state of the current item among: unmarked, TODO, DONE. |
    | C-c C-s RET         | 开始时间戳                                                             |
    | C-c C-d RET         | 结束时间戳                                                             |
    | C-c .               | 加时间段，要输入两次，开始和结束                                       |
    | C-c [               | 将todo加入agenda                                                       |
    | C-c a               | 调出agenda，不不能直接用，要在.emacs中加定义语句的                     |
    | < ++d>              | 在开始时间戳中加++d可以设置为每天都做                                  |
    | S-up/down           | 设置优先级ABC                                                          |
    |---------------------+------------------------------------------------------------------------|
    | C-c C-x C-i         | 开始计时                                                               |
    | C-c C-x C-o         | 结束计时                                                               |
    | C-c C-x C-r         | 分析时间，创建时间统计表格                                             |
    | C-c C-c/C-c C-x C-u | Update dynamic block at point.                                         |
    | C-c C-c C-q         | Cancel the current clock.                                              |
    | C-c C-x C-d         | org-clock-display, press C-c C-c to make the overlays disappear        |
    | C-c C-x e           | Set the effort estimate for the current entry.                         |
    | C-c C-x C-e         | Modify the effort estimate of the item currently being clocked.        |
    | C-c C-x C-j         | Jump to the headline of the currently clocked in task.                 |
    |---------------------+------------------------------------------------------------------------|
*** Agenda views
    :LOGBOOK:
    CLOCK: [2016-08-12 五 12:24]--[2016-08-12 五 12:32] =>  0:08
    CLOCK: [2016-08-02 二 12:39]--[2016-08-02 二 13:54] =>  1:15
    :END:
 1. 把文件加入agenda列表才能在agenda里查看此文件的信息
 2. 常用快捷键如下：
    | ordinal | commands | effect                                             |
    |---------+----------+----------------------------------------------------|
    |       1 | C-c [    | Add current file to the list of agenda files.      |
    |       2 | C-c ]    | Remove current file from the list of agenda files. |
    |       3 | C-c a    | Access to the dispatcher                           |
    |       4 | C-c a #  | List projects that are stuck.                      |
    |       5 | C-x C-w  | Write the agenda view to a file.                   |
    |       6 | q        | Quit agenda, remove the agenda buffer.             |
    |         |          |                                                    |
*** 标签
 1. 快捷键如下：
    | 序号 | 快捷键如下 | 作用     |
    |------+------------+----------|
    | 1    | C-c C-q    | 增加标签 |
** yasnippet
*** 安装
 1. 用elpa安装即可
*** 使用
 1. 输入关键词后按tab键
 2. 
** Switching Buffers
 1. C-x b 
 2. C-x b [filename/buffer name]
 3. C-x b [newname]    #When quiting Emacs, the editor won't ask you whether
    or not you want to save it, so I can take it as a testing field.
** Buffer List
  | Command         | Effect                                                   |
  |-----------------+----------------------------------------------------------|
  | C-x C-b         | Emacs displays a list of buffers.                        |
  | C-x o           | Move to the buffer list window.                          |
  | C-n/n/Space     | Move down a  line.                                       |
  | C-p/p/Backspace | Move up a line.                                          |
  | d or k/s/~/%    | Mark the buffer to be deleted/saved/unmodified/read-only |
  | q               | Quit buffer list.                                        |
 Tips:
 + Type the first few characters of the correct buffer name and press Tab,
  emacs fills the rest of the name.
** Deleting Buffers
 1. C-x k [buffer name] 
 2. M-x kill-some-buffers #Emacs offers to kill each and every buffer
** Shell Mode
  | Command   | Effect                                                                         |
  |-----------+--------------------------------------------------------------------------------|
  | C-c C-c   | Interrupt a command                                                            |
  | M-p/n     | To retrieve the last/subsequent shell command                                  |
  | C-c C-o   | Delete output from the most recent command                                     |
  | C-c C-r/e | Reposition the first/last line of last command to the top/bottom of the window |
  | C-c C-p/n | To move to the previous/next output group                                      |
** Windows
  | Command | Effect                               |
  |---------+--------------------------------------|
  | C-x 2/3 | Split window vertically/horizontally |
  | C-x o   | Move to an other window              |
  | C-x 0/1 | Delete this wondow/other window      |
  | C-x ^   | Enlarge window vertically            |
  | C-x {/} | Shrink/Enlarge window horizontally   |
  | C-x 4 b | Switch to buffer in other window     |
  | C-x 4 f | Find file in other window            |
  | C-x 4 m | Mail in other window                 |

** Email
 1. 设置邮箱地址:(setq user-mail-address "hitzhzw3889@126.com")
 2. 发送邮件C-x m
** Auto-complete-mode
 1. 从github上下载.zip压缩包解压到~/.emacs.d目录中。包括auto-complete-master.zip及popup-el-master.zip
 2. 加载到~/.emacs.d中，命令为“M-x load-fil load-pathl，其中的load-path为etc/install.el的绝对路径，不能搞错！
 3. 选择加载目录为~/.emacs.d
 4. 当加载成功时，会提醒你把如下代码加到~/.emacs中，代码可能随着环境的不同而不同：
   #+BEGIN_SRC el
   (add-to-list 'load-path "~/.emacs.d")
   (require 'auto-complete-confige)
   (ac-config-default)
   #+END_SRC
 5. 这个装插件的步骤应该具有普遍意义，其他类型的插件安装也可据此类推！
 6. 发现js-mode输入function是Function总是排在最前面，直接按回车的话输入Function
   显然不行，于是我把dict/js-mode中所有大写的单词排在小写的后面或者直接删除大
   写的单词都不能解决问题。苦思许久发现可能需要重新load-file下install.el文件，
   于是是了一下发现删除大写的单词起作用，而调整顺序不起作用。
 7. 想要在某个模式下有某个补全只要在对应的/dict/**-mode中添加其单词即可。
** Color-theme
下载并解压缩color-theme-6.6.0,解压缩后把theme文件夹及color-theme.el文件添加
进.emacs.d(即默认的加载目录)后，再在.emacs文件中添加(require 'color-theme)语句
即可正常工作了。
** Emacs lisp
 1. 首先得搞清楚怎么使用里lisp-mode及lisp interaction mode，这样才能实验学习中
   的各要素，才能正确地写脚本。
   | 命令    | 作用                                         |
   |---------+----------------------------------------------|
   | C-j     | 交互模式下运行命令                           |
   | C-x C-e | 执行emacs lisp模式下光标所在行，求值单条语句 |
   |         |                                              |
** Tricks
*** xterm-mouse mode 
 1. ON/OFF   M-x xterm-mouse-mode
*** make a mode fast
 1. M-x byte-compile
*** M-x list-packages
 1. 可以用来安装安装包中管理器中的插件包。
 2. company-mode及js2-mode可以用此方式。
 3. 自启动的话还要在.emacs文件中添加相应语句。
 4. 其他的有用包还有
   | 序号 | 包名      | 作用                                             |
   |------+-----------+--------------------------------------------------|
   |    1 | undo-tree | treat undo history as a tree                     |
   |------+-----------+--------------------------------------------------|
   |    2 | beacon    | Highlight the cursor whenever the window scrolls |
   |------+-----------+--------------------------------------------------|

*** 关于.emacs
 1. 其实每改动一次文件不必关闭重启生效，这样很低效，可选如下几种方案
    1. M-x load-file ~/.emacs即可，效果最佳
    2. C-x C-e，添加命令后直接运行
 2. 
*** M-x read-only：只读模式
** 相关网站学习点
 1. http://ergoemacs.org/emacs/elisp_library_system.html
** 常用快捷键
  | 序号 | 按键              | 后续按键 | 作用                  |
  |------+-------------------+----------+-----------------------|
  |    1 | C-h f XX-mode RET |          | 查看文档              |
  |    2 | C-_               |          | undo                  |
  |------+-------------------+----------+-----------------------|
  |    3 | M-c               |          | 单词首字母大写        |
  |    4 | M-u/l             |          | 单词全部大写/小写     |
  |------+-------------------+----------+-----------------------|
  |    5 | C-s/r             |          | 向下/上查找           |
  |      |                   | C-s/r    | 跳到下一个/上一个结果 |
  |      |                   | C-w      | 补全当前位置的单词    |
  |------+-------------------+----------+-----------------------|
  |    6 | M-%               |          | 启动查找替换          |
  |      |                   | y        | 替换并跳到下一个      |
  |      |                   | n        | 忽略并跳到下一个      |
  |      |                   | ！       | 替换剩下的全部        |
  |      |                   | q        | 结束退出              |
  |------+-------------------+----------+-----------------------|
  |    7 | M-x occur RET     |          | 列出匹配的全面模式    |
  |------+-------------------+----------+-----------------------|
* HTML5/CSS3
** 其他
 1. emacs中有html-mode，在此模式中的快捷键如下：
   | 快捷键    | 作用                        |
   |-----------+-----------------------------|
   | C-c C-t   | 调用模板                    |
   | C-c C-s   | 启用/停用html-autoview-mode |
   | C-c 1-6   | 插入h1-h6标题               |
   | C-c C-c i | 插入图像引入标记<img>       |
   | C-c Enter | 插入<p>                     |
   | C-c /     | 插入闭合标志                |
 2. 基础教程学习后应该先投入实践，一段时间之后再看高级教程，这样才会起到总结及
   提高的作用。时间上可以跃进，步骤上却绝不可以！
** 《HTML5与CSS3基础教程（第8版）》
*** HTML
    #+BEGIN: clocktable :maxlevel 2 :scope subtree
    #+CAPTION: Clock summary at [2016-08-25 四 11:32]
    | Headline     | Time   |
    |--------------+--------|
    | *Total time* | *7:03* |
    |--------------+--------|
    #+END:
    :LOGBOOK:
    CLOCK: [2016-08-23 二 18:25]--[2016-08-23 二 19:08] =>  0:43
    CLOCK: [2016-08-23 二 16:44]--[2016-08-23 二 17:54] =>  1:10
    CLOCK: [2016-08-23 二 14:48]--[2016-08-23 二 16:20] =>  1:32
    CLOCK: [2016-08-23 二 10:17]--[2016-08-23 二 12:01] =>  1:44
    CLOCK: [2016-08-21 日 09:10]--[2016-08-21 日 11:04] =>  1:54
    :END:
**** 基本HTML结构
 1. 语义化HTML(semantics HTML)指的是那些使用最恰当的HTML元素进行标记的内容，在
   标记的过程中并不关心内容显示。
 2. 各标签的简单层级关系如下表：
   | 序号 | 一级元素 | 二级    | 属性及值             | 作用                                             | HTML5 |
   |------+----------+---------+----------------------+--------------------------------------------------+-------|
   | <L>  |          |         |                      |                                                  |       |
   | 1    | DOCTYPE  |         | <!DOCTYPE html>      | 声明页面为html5文档                              | 是    |
   | 2    | html     |         | lang="en"            | 开始文档的实际html部分                           |       |
   | 3    | head     |         |                      | 网页文档的头部                                   |       |
   | 4    |          | meta    | charset="utf-8"      | 设置字符编码                                     |       |
   | 5    |          | title   |                      | 设置页面标题，title元素是必需的                  |       |
   | 6    | body     |         |                      | 主体                                             |       |
   | 7    |          | h1~h6   |                      | 六级标题，可以放在其他元素中                     |       |
   | 8    |          | header  | role="banner"        | 一组介绍性、导航性内容，加role表示页面级页眉     | 是    |
   | 9    |          | nav     | role="navigation"    | 明确表示主导航链接的区域，可以使用ul及ol结构     | 是    |
   | 10   |          | main    | role="main"          | 表示页面主要内容部分，一个页面只能使用一次       | 是    |
   | 11   |          | article |                      | 文章、评论等独立的内容项，可以嵌套使用           | 是    |
   | 12   |          | section |                      | 相似主题的一组内容，表示特定区域（与div不同）    | 是    |
   | 13   |          | aside   | role="complementary" | 独立于主体内容之外的一块内容                     | 是    |
   | 14   |          | footer  | role="contentinfo"   | 页脚，页面级才使用role                           | 是    |
   | 15   |          | div     |                      | 用于添加CSS及js的通用容器，不含语义，对比span    |       |
   | 16   |          |         | id="name"            | 一个页面同一ID只能出现一次                       |       |
   | 17   |          |         | class="name1 ..."    | 一个元素可有多个class且同一class可为多个元素使用 |       |
   | 18   |          |         | title="label"        | 与title元素不同，为任何部分添加提示标签          |       |
   |------+----------+---------+----------------------+--------------------------------------------------+-------|
 3. 注释
   格式为<!--注释部分-->
**** 文本
  | 序号 | 元素              | 属性及值          | 作用                                     | HTML5 |
  |------+-------------------+-------------------+------------------------------------------+-------|
  |    1 | p                 |                   | 创建新段落                               |       |
  |    2 | small             |                   | 表示细则一类的旁注，只适用于短语         |       |
  |    3 | strong            |                   | 表内容的重要性，默认粗体，对比b          |       |
  |    4 | em                |                   | 表强调的唯一元素，默认斜体，对比i        |       |
  |    5 | figure/figcaption |                   | 引入图片，后者为前者标题，可选           | 是    |
  |    6 | cite              |                   | 指明引用或参考，表参考源，默认斜体       |       |
  |    7 | blockquote/q      | cite="url"        | 表示引述的文本，前者新行，后者行中       |       |
  |    8 | time              | datetime="time"   | 指定时间，datetime中为机器可读格式       | 是    |
  |    9 | abbr              | title="expansion" | 提示框提示缩写的全程                     |       |
  |   10 | dfn               |                   | 定义术语，默认斜体，可与abbr合用         |       |
  |   11 | sup/sub           |                   | 创建上/下标                              |       |
  |   12 | address           |                   | 添加作者联系信息，一般为email            |       |
  |   13 | ins/del           |                   | 标注添加/删除的内容，默认加上下划/删除线 |       |
  |   14 | s                 |                   | 标注不再准确和或相关的文本，默认家删除线 |       |
  |   15 | code              |                   | 标记代码                                 |       |
  |   16 | kbd/samp/bar      |                   | 标记用户输入/事例输出/变量的值           |       |
  |   17 | pre               |                   | 使用预格式化的文本，即保留原有格式       |       |
  |   18 | mark              |                   | 突出显示文本，默认黄色背景               | 是    |
  |   19 | br                | <br>或<br />      | 插入换行，为空元素                       |       |
  |   20 | span              | id/class/lang等   | 无语义元素，不适合块级内容，对比div      |       |
  |------+-------------------+-------------------+------------------------------------------+-------|

**** 图像
 1. 图片的六个要素：格式、下载速度、颜色、大小（尺寸）、透明度、动画
 2. web中最广泛的三种格式：JPEG、PNG、GIF，后两者为无损格式。各特点如下表：
    | 序号 | 格式  | 损失 | 大小 | 色彩数   | 基本透明 | alpha透明 | 动画 |
    |------+-------+------+------+----------+----------+-----------+------|
    |    1 | JPEG  | 有   | 小   | >=1600万 | N        | N         | N    |
    |    2 | PNG8  | 无   | 大   | 256      | Y        | Y         | N    |
    |    3 | PNG24 | 无   | 大   | >=1600万 | Y        | N         | N    |
    |    4 | PNG32 | 无   | 大   | >=1600万 | Y        | Y         | N    |
    |    5 | GIF   | 无   | 大   | 256      | Y        | N         | Y    |
    |------+-------+------+------+----------+----------+-----------+------|
 3. 页面中插入图像：<img src="image.url" /> 
 4. 提供替代文本：alt属性，在src属性及值的后面 
 5. 指定图像尺寸：width、height属性，在src属性及值的后面
**** 链接
 1. a元素创建链接，格式为<a>Label text</a>
 2. 各属性及格式如下表：
    | 序号 | 属性   | 格式                      | 作用                           | 备注        |
    |------+--------+---------------------------+--------------------------------+-------------|
    |    1 | href   | href="page.html"          | 激活标签文本时，转到此页面     | 提供URL地址 |
    |    2 | rel    | rel="external"            | 可选，指指向另一网站           | 提升语义    |
    |    3 | title  | title="prompting message" | 鼠标旋停时显示在链接旁         |             |
    |    4 | target | target="window"           | 在名为window的新窗口中打开链接 | 一般不用    |
    |------+--------+---------------------------+--------------------------------+-------------|
***** 其他
 1. href指hypertext reference（超文本引用）。
 2. HTML5支持块级链接(block-level link)，方法同上，只要将相应段落加载a标签中即
  可，几乎支持所有元素，如段落、列表、整篇文章。
 3. 创建锚(anchor)：转到页面特定位置使用，格式为
  href="page.html#anchor-name"其中anchor-name为转至元素的id值，如在本页面内则
  无"page.html"
 4. 图片、音频、email都可以作为链接，格式如:<a href="url">Label text</a>，url为文件位置，
  其中email为："mailto:name@domain.com" ，是个例外且一般不推荐，电话为：tel+国
  家代码+电话号码。此外，链接中都可以使用title属性。
**** 列表
     所有的列表都是由父元素和子元素构成的，父元素用于指定要创建的列表的类型，
     子元素用于指定要创建的列表项目类型，大致如下表：
     | 列表类型 | 父元素 | 子元素 |
     |----------+--------+--------|
     | 有序列表 | ol     | li     |
     | 无序列表 | ul     | li     |
     | 描述列表 | dl     | dt和dd |
     |----------+--------+--------|
***** 创建有序列表和无序列表
***** 选择标记(列表项目左侧的标记的类型)
 1. 选择标记list-style-type: marker(variable)，marker以后靠查表
 2. 显示无标记列表list-style-type: none
***** 使用定制的标记
***** 选择列表的起始编号
 1. 在ol开始标签中输入start="n"，n表示列表的起始值
 2. 在目标li项目内输入value="n"，n代表该列表项目的值
 3. value值覆盖start值
 4. 使用value属性对某列表项目的编号进行修改后，后续的列表也会相应地重新编号.
***** 控制标记的位置
 1. 使用list-style-position: inside/outside(default)
 2. list-style-position属性是继承的
***** 同时设置所有的列表样式属性
 1. 可以将list-style-type,list-style-position,list-style-image放在一条属性中，
    如下：
    #+BEGIN_SRC css
      ul {
          list-style: circle inside url(arrow-right.png);
      }
    #+END_SRC
 2. 常用用法为使用list-style: none;取消标记
 3. list-style属性是继承的
***** 设置嵌套列表的样式
      #+BEGIN_SRC css
        ol {
        list-style-type: upper-roman;
        }

        ol ol {
        list-style-type: upper-alpha;
        }

        ol ol ol {
        list-style-type: decimal;
        }

        /* Set font sizing */
        ol li {
        font-size: .875em;
        }

        li li {
            font-size: 1em; /* prevent shrinking text! */
        }
      #+END_SRC
***** 创建描述列表(description list)
 1. 每个列表都包含在dl中，其中的每个名-值组都有一个或多个dt元素(名称或术语)以及一个或多
    个dd元素(它们的值).
 2. 可以嵌套和任意组合使用.
**** DONE 表单
     CLOSED: [2016-08-23 二 16:20] DEADLINE: <2016-08-23 二>
***** HTML5对表单的改进——查阅
***** 创建表单
 1. 每个表单都已form开始标签开始，以form结束标签结束.
 2. action属性：服务器上的脚本，如action="save-info.php"
 3. method属性：get/post，不确定时用post
***** 处理表单
 1. 表单从访问者那里收集信息，脚本则对这些信息进行处理
 2. PHP、Django、Ruby on Rails、Asp.Net、JSP等
 3. 必须考虑将服务器端的验证加入表单处理脚本.
***** 对表单元素进行组织
 1. fieldset元素：将相关的元素组合在一起
 2. legend元素：为每个fieldset提供一个标题（caption）
 3. 如果有的话，legend元素必须是fieldset里的地一个元素
 4. CSS对legend元素的样式修改能力有限，尤其是关于定位的样式
 5. 在样式不能达到良好效果是可以用h1～h6代替legend
***** 创建文本框
 1. 用带有type="text"的input标签表现
 2. 为每个文本框设置name属性，name="dataname"
 3. value="default"，如没有输入别的内容，default将被发送到服务器
 4. placeholder="hinttext"，最初显示的提示文字，聚焦是消失
 5. required="required"，有值时才能提交
 6. autofocus="autofocus"/autofocus，默认获得焦点
 7. size="n"，设置文本框大小，n为以字符为单位的文本框宽度
 8. maxlength="n"，允许输入的最大字符数
 9. autocomplete="off"，关闭保存的补全
 10. label标签，为让访问者识别文本框的标签，可选
***** 为表单组件添加说明标签
 1. label元素
 2. for属性，当for属性和标签的id值一致时就能使二者产生联系
 3. 让for、id和name属性值都一样是一种并非必要但很常见的做法
 4. 一定要保证for和id的值是一样的
***** 创建密码框
 1. 密码框中输入的文本会使用圆点和星号进行隐藏
 2. type="password"创建密码框
 3. id,name,size,maxlength,required,autofocus等同上
***** 创建email框、搜索框、电话框和URL框
 1. 此部分为HTML5新增的
 2. <input type="email/search/tel/url"
 3. id,name,value,placeholder,required,autofocus,size,maxlength等同上
 4. >或/>结束
 5. 支持autocomplete
 6. 正则表达式：http://html5pattern.com 可以找到很多有用的模式
***** 创建单选按钮
 1. <input type="radio"
 2. id,name,value等同上
 3. checked="checked"/checked，处于默认激活状态
***** 创建复选框
 1. <input type="checkbox"
 2. id,value,checked等同上
 3. label元素的for属性值与id值同
***** 创建文本区域
 1. 给访问者填写问题或评论的空间
 2. textarea标签，如<textarea></textarea>
 3. rows/cols属性值，控制文本区域的高度和宽度，row="n"
 4. id,name,maxlength同上
 5. 添加预设值只要放在开始标签与结束标签之间即可
 6. maxlength为HTML5新增的
***** 创建选择框
 1. 由两种元素组成：select和option，option为子标签，如下：
    #+BEGIN_SRC html
      <select id="state" name="state">
        <option value="AL">Alabama</option>
        <option value="AK">Alaska</option>
        <option value="CA">California</option>
        <option value="CO">Colorado</option>
      </select>
    #+END_SRC
 2. 在select中添加id,name,size="n"属性
 3. multiple/multiple="multiple"，允许选择多个
 4. 在option中添加value属性
 5. selected/selected="selected"，默认选中
 6. 选项较多时还可以在option上面加一层optgroup
***** 让访问者上传文件
 1. 让访问者向服务器上传文件
 2. 在form开始标签中增加enctype="multipart/form-data"
 3. 输入：<input type="file"
 4. id,name,size等同上
 5. multiple="multiple"/multiple，允许上传一个以上的文件
 6. 允许上传的表单不能使用get方法
***** 创建隐藏字段
 1. 用于存取先前的表单收集的信息，不可见
 2. <input type="hidden"
 3. value="data"
 4. 创建可见但不可修改的表单元素：disabled属性或readonly属性
***** 创建提交按钮
 1. <input type="submit"
 2. value="submit message"
 3. 创建图像提交按钮：<input type="image" src="*.url" alt=""
 4. 创建结合文本和图像的提交按钮：button元素
 5. 如果包含一个以上的提交按钮，就应该避免使用button元素
 6. 重置按钮：<input type="reset" />或<button type="reset">Reset</button>
 7. 关闭email及url的自动验证：<input type="submit" formnovalidate />
***** 禁用表单元素
 1. 开始标签中输入disabled/disabled="disabled"
***** 根据状态为表单设置样式
 1. CSS新增的伪类：
    | 序号 | 选择器    | 功能                          |
    |------+-----------+-------------------------------|
    |    1 | :focus    | 获得焦点的字段                |
    |    2 | :checked  | 选中的焦点按钮或复选框        |
    |    3 | :disabled | 具有disabled属性的字段        |
    |    4 | :enable   | 与上相反                      |
    |    5 | :required | 具有required属性的字段        |
    |    6 | :optional | 与上相反                      |
    |    7 | :invalid  | 与pattern属性不匹配或无效字段 |
    |    8 | :valid    | 与上相反                      |
    |------+-----------+-------------------------------|
 2. 格式为：
    #+BEGIN_SRC css
      textarea: disabled {
          background-color: #ccc;
          border-color: #999;
          color: #666;
      }
    #+END_SRC
**** DONE 视频、音频和其他多媒体
     CLOSED: [2016-08-23 二 17:54] DEADLINE: <2016-08-23 二>
***** 第三方插件和步入原生
***** 视频文件格式
 1. HTML5支持三种视频文件格式：.ogg或.ogv，.mp4，.webm
***** 在网页中添加单个视频
 1. video元素：<video src=""></video>
 2. src属性，指定视频文件的URL
 3. autoplay，自动播放
 4. controls，添加浏览器为视频设置的默认控件
 5. muted，静音
 6. loop，循环播放
 7. poster，制定视频加载时显示的图像
 8. width，视频宽度，默认300
 9. height，视频高度，默认150
 10. preload，预加载
***** 为视频添加控件和自动播放
 1. 控件：controls属性
 2. 自动播放：autoplay属性
***** 为视频添加循环播放和海报图像
 1. 循环播放：autoplay和loop属性
 2. 海报图像：poster属性，poster="url"
***** 阻止视频预加载
 1. preload="none"
 2. 默认值为auto
 3. none与auto之间的中间值：metadata，只获取基本信息，如尺寸、时长等
***** 使用多种来源的视频和备用文本
 1. 至少提供两种格式：MP4和WebM
 2. source元素：
    #+BEGIN_SRC html
      <source src="" type="video/mp4">
      <source src="" type="video/webm">
    #+END_SRC
 3. 备用链接放在video里面
***** 提供可访问性
***** 音频文件格式
 1. HTML5支持的文件格式：.ogg/.mp3/.wav/.aac/.mp4/.opus
 2. 最好的两种格式为.ogg或.mp3
***** 在网页中添加带控件的单个音频文件
 1. 同视频类似，将video换成audio即可
 2. 属性有src,autoplay,controls,muted,loop及preload
***** 自动播放、循环和预加载音频
 1. 自动播放：autoplay及controls
 2. 循环播放：loop及controls
 3. 预加载元数据：preload="metadata"及controls
***** 提供带备用内容的多个音频源
 1. source元素：
    #+BEGIN_SRC html
      <source src="" type="audio/ogg">
      <source src="" type="audio/mp3">
    #+END_SRC
 2. 备用链接放在audio里面
 3. type属性可以帮助浏览器判断它是否能播放某个文件
***** 添加具有备用Flash的视频和音频
 1. 使用MediaElement.js，后续查阅
***** 高级多媒体
 1. 通过canvas操作视频
 2. 联合使用SVG和视频
***** 更多资源
 1. 在线资源
 2. 图书
**** DONE 表格
     CLOSED: [2016-08-23 二 19:08] DEADLINE: <2016-08-23 二>
***** 结构化表格
 1. table元素
 2. 每行（tr）都包含标题单元格（th）或数据单元格（td）
 3. thead元素：显式地将一行或多行标题标记为表格的头部
 4. tbody元素：包围所有的数据行
 5. tfoot元素：显式地将一行或多行标题标记为表格的尾部
 6. 如果有thead、tfoot则必须有tbody
 7. 位置关系如下：
    #+BEGIN_SRC html
      <table>
        <caption>Quarterly Financials for 1962-1964<br /> (in Thousands)</caption>
        <thead> <!-- table head -->
          <tr>
            <th scope="col">Quarter</th>
            <th scope="col">1962</th>
            <th scope="col">1963</th>
            <th scope="col">1964</th>
          </tr>
          </thead>
        <tbody> <!-- table body -->
          <tr>
            <th scope="row">Q1</th>
            <td>$145</td>
            <td>$167</td>
            <td>$161</td>
          </tr>
          <tr>
            <th scope="row">Q2</th>
            <td>$140</td>
            <td>$159</td>
            <td>$164</td>
          </tr>
          <tr>
            <th scope="row">Q3</th>
            <td>$153</td>
            <td>$162</td>
            <td>$168</td>
          </tr>
          <tr>
            <th scope="row">Q4</th>
            <td>$157</td>
            <td>$160</td>
            <td>$171</td>
          </tr>
        </tbody>
        <tfoot> <!-- table foot -->
          <tr>
            <th scope="row">TOTAL</th>
            <td>$595</td>
            <td>$648</td>
            <td>$664</td>
          </tr>
        </tfoot>
      </table>
    #+END_SRC
***** 让单元格跨越多列或多行
 1. colspan属性和rowspan属性，colspan="n"，用法如下：
    #+BEGIN_SRC html
      <thead> <!-- table head -->
        <tr>
          <th scope="rowgroup">Time</th>
          <th scope="col">Mon</th>
          <th scope="col">Tue</th>
          <th scope="col">Wed</th>
        </tr>
      </thead>
      <tbody> <!-- table body -->
        <tr>
          <th scope="row">8 pm</th>
          <td>Staring Contest</td>
          <td colspan="2">Celebrity Hoedown</td>
        </tr>
        <tr>
          <th scope="row">9 pm</th>
          <td>Hardy, Har, Har</td>
          <td>What's for Lunch?</td>
          <td rowspan="2">Screamfest Movie of the Weak</td>
        </tr>
        <tr>
          <th scope="row">10 pm</th>
          <td>Healers, Wheelers &amp; Dealers</td>
          <td>It's a Crime</td>
        </tr>
      </tbody>
    #+END_SRC
*** CSS
    #+BEGIN: clocktable :maxlevel 2 :scope subtree
    #+CAPTION: Clock summary at [2016-08-25 四 14:48]
    | Headline     | Time   |
    |--------------+--------|
    | *Total time* | *4:21* |
    |--------------+--------|
    #+END:
    :LOGBOOK:
    :END:
CSS全称为Cascading Style Sheets，中文称层叠样式表或级联样式表。
**** 构造规则
 + 每条规则都有两个主要部分：选择器（selector）和声明块（declaration block）。
 + 生命块由一个或多个属性-值对（每个属性-值对构成一条声明，declaration）。
 + 声明块以花括号开头、花括号结尾，每条生命以冒号隔开、分号结尾。
 + 各条声明顺序不影响效果。
 格式为：
   #+BEGIN_SRC css
   selector {
       property: value;
       ...
   }
   #+END_SRC
**** 注释
 + 类似C的多行注释
**** 继承
 * 被继承的CSS属性包括：
   | 序号 | 类型     | 属性                | 作用                             | 备注 |
   |------+----------+---------------------+----------------------------------+------|
   |    1 | 文本     | color               | 颜色                             |      |
   |      |          | direction           | 方向                             |      |
   |      |          | font                | 字体                             |      |
   |      |          | font-family         | 字体系列                         |      |
   |      |          | font-size           | 字体大小                         |      |
   |      |          | font-style          | 设置斜体                         |      |
   |      |          | font-variant        | 设置小型大写字母                 |      |
   |      |          | font-weight         | 设置粗体                         |      |
   |      |          | letter-spacing      | 字母间距                         |      |
   |      |          | line-height         | 行高                             |      |
   |      |          | text-align          | 设置对其方式                     |      |
   |      |          | text-indent         | 设置首行缩进                     |      |
   |      |          | text-transform      | 修改大小写                       |      |
   |      |          | visibility          | 可见性                           |      |
   |      |          | white-space         | 指定如何处理空格                 |      |
   |      |          | word-spacing        | 字间距                           |      |
   |------+----------+---------------------+----------------------------------+------|
   |    2 | 列表     | list-style          | 列表样式                         |      |
   |      |          | list-style-image    | 指定特定标记                     |      |
   |      |          | list-style-position | 确定列表标记位置                 |      |
   |      |          | list-style-type     | 设置列表标记                     |      |
   |------+----------+---------------------+----------------------------------+------|
   |    3 | 表格     | border-collapse     | 相邻单元格边框是否合并           |      |
   |      |          | border-spacing      | 制定表格边框之间的空隙大小       |      |
   |      |          | caption-side        | 设置表格标题的位置               |      |
   |      |          | empty-cells         | 是否显示空单元格                 |      |
   |------+----------+---------------------+----------------------------------+------|
   |    4 | 页面设置 | orphans             | 元素内部分页时底部保留的最少行数 |      |
   |      |          | page-break-inside   | 设置元素内部的分页方式           |      |
   |      |          | widows              | 元素内部分页时顶部保留的最少行数 |      |
   |------+----------+---------------------+----------------------------------+------|
   |    5 | 其他     | cursor              | 鼠标指针                         |      |
   |      |          | quotes              | 指定引号样式                     |      |
   |      |          |                     |                                  |      |
   |------+----------+---------------------+----------------------------------+------|
**** 规则冲突时的选择
 + 特殊性（specificity）
 + 顺序（order）
 + 重要性（importance）
**** 颜色
 * RGB形式，如color:rgb(89,0,127)或rgb(35%,0%,50%)，其中89=255*35%
 * hex（十六进制数），把红、绿、蓝的数值转成16进制，前面加#
 * RGBA，在RGB基础上加一个alpha透明度，如background:rgba(89,0,27,0.75)表示25%
   透明度。
 * HSL为CSS3新增的，代表色相（hue）、饱和度（saturation）和亮度（lightness），
   色相取值范围分别是0～360、饱和度和亮度取值为0～100%
 * HSLA在HSL的基础上为颜色设置了alpha透明度。用法如：
   background:hsla(95,100%,28%,.4)，常见颜色如下表：
   |------+------+-----+------+-----|
   | 序号 | 颜色 |   h |    s |   l |
   |------+------+-----+------+-----|
   |    1 | 红   |   0 | 100% | 50% |
   |    2 | 黄   |  60 | 100% | 50% |
   |    3 | 绿   | 120 | 100% | 50% |
   |    4 | 青   | 180 | 100% | 50% |
   |    5 | 蓝   | 240 | 100% | 50% |
   |    6 | 紫红 | 300 | 100% | 50% |
   |------+------+-----+------+-----|
**** 操作样式表
***** 外部样式表（首选方法）
 1. html页面head部分输入<link rel="stylesheet" href="url.css"/>
 2. HTML5中不需要在link元素中包含type="text/css" 
***** 嵌入样式表
 1. 在head中添加<style>代码部分<style/>
 2. 此规则不能用于其他页面，缓存的好处也不存在了。
 3. HTML5也不要求在style开始标签中包含属性type="text/css"
***** 内联样式表（最不可取） 
 1. 在希望格式化的HTML元素的开始标签中输入style="border: 4px solid red"无需花
    括号和选择器，多条声明用分号隔开。
 2. 测试可能用的到。
 3. 内联样式的优先级高于其他所有样式，!important除外。
***** 样式的层叠和顺序
 1. 在其他条件相同的情况下，越晚出现的样式优先级越高。
 2. 不同的外部样式表中规则如有冲突，后出现的样式表中的规则优先。
 3. 避免使用!important
**** DONE 定义选择器
     CLOSED: [2016-08-25 四 11:30] DEADLINE: <2016-08-25 四>
     :LOGBOOK:
     CLOCK: [2016-08-25 四 10:08]--[2016-08-25 四 11:30] =>  1:22
     CLOCK: [2016-07-20 三 21:45]--[2016-07-20 三 22:19] =>  0:34
     CLOCK: [2016-07-21 四 23:14]--[2016-07-22 五 00:15] =>  1:01
     :END:
***** 构造选择器
 1. 选择器可以定义如下5个不同的标准来选择要进行格式化的元素：
    | 序号 | 标准                   | 示例                        | 备注                     |
    |------+------------------------+-----------------------------+--------------------------|
    |    1 | 元素的类型或名称       | h1 {color: red}             | h1                       |
    |------+------------------------+-----------------------------+--------------------------|
    |    2 | 元素所在的上下文       | h1 em {color: red;}         | h1元素中的em             |
    |------+------------------------+-----------------------------+--------------------------|
    |    3 | 元素的类或ID           | .error {color: red;}        | error的元素              |
    |      |                        | #gaudi {color: red;}        | id为gaudi的元素          |
    |      |                        | strong.error {color: red;}  | error类的strong元素      |
    |------+------------------------+-----------------------------+--------------------------|
    |    4 | 元素的伪类或伪元素     | a:link {color: red:}        | link伪类的a元素          |
    |------+------------------------+-----------------------------+--------------------------|
    |    5 | 元素是否有某些属性和值 | a[title] {color: red;}      | 所有具有属性title的a元素 |
    |      |                        | a[href="url"] {color: red;} | 指向url的a元素           |
    |------+------------------------+-----------------------------+--------------------------|
 2. 选择器可以使用这5个标准的任意组合.
 3. 编写CSS要让选择器尽可能简单，仅保持必要的特殊性，应该充分利用样式的层叠特
    性（继承性）.
***** 按名称选择元素
 1. 格式为：
    #+BEGIN_SRC css
    h2 {
        color: red;
    }
    #+END_SRC
***** 按类或ID选择元素
 1. 类的格式：
    #+BEGIN_SRC css
    .classname {
        color: red;
    }
    #+END_SRC
 2. ID的格式为：
    #+BEGIN_SRC css
    #idname {
        color: red;
    }
    #+END_SRC
 3. 应用于多个类时格式如下：
    #+BEGIN_SRC css
    .architect.bio {
        color: red;
    }
    #+END_SRC
 4. 应用与多个类时，类名之间没有空格.如有空格则会针对architect类的元素嵌套的
    bio元素设置样式.
***** 按上下文选择元素
 1. 按祖先元素选择要格式化的元素：ancestor descendant {}
 2. 按父元素选择要格式化的元素：parent > child {}
 3. 按相邻同胞元素选择要格式化的元素：sibling + element {}
 4. 按普通同胞元素选择要格式化的元素：h1~h2 {}
***** 选择第一个或最后一个子元素
 1. 常用在列表中，格式如下：
    #+BEGIN_SRC css
      li: first-child {
          color: red;
      }
      li: last-child {
          color: red;
      }
    #+END_SRC
 2. 选的是li元素，而非li的子元素
***** 选择元素的第一个字母或者第一行
 1. first-letter与first-line，用法同上，如下：
    #+BEGIN_SRC css
      p: first-letter {
          color: red;
          font-size: 1.4m;
          font-weight: bold;
      }
      p: first-line {
          color: red;
      }
    #+END_SRC
 2. CSS3中，这两个语法为::first-line及::first-letter
 3. 伪元素有四个，包括::first-line/::first-letter/::before/::after
 4. 伪类如first-child,:link,:hover等
***** 按状态选择链接元素
 1. 包括link、visited、focus、hover、active等状态，代码如下：
    #+BEGIN_SRC css
      a:link {
          color: red;
      }
      /* 未被激活或指向 */
      a:visited {
          color: orange;
      }
      /* 访问者已激活过 */
      a:focus {
          color: purple;
      }
      /* 通过键盘选择并已准备好激活的 */
      a:hover {
          color: green;
      }
      /* 光标指向时 */
      a:active {
          color: blue;
      }  
      /* 激活过的 */
    #+END_SRC
 2. 严格按此顺序来
***** 按属性选择元素
 1. 可指定属性值完全匹配或者不制定以全包括，如下：
    #+BEGIN_SRC css
      p[class] {
          color: red;
      }
      p[class="intro"] {
          color: red;
      }
    #+END_SRC
 2. 指定属性值时可以用多种匹配方式，查阅
***** 指定元素组
 1. 用逗号隔开，用法如下：
    #+BEGIN_SRC css
      h1,
      h2 {
          color: red;
      }
    #+END_SRC
 2. 换行不是必须的，只是为了更清晰而已
 3. 可以组合使用任何类型的选择器，从最简单的到最复杂的都可以
***** 组合使用选择器
 1. 只在必要情况下组合使用选择器，并且，最好将特殊性控制在刚好需要的程度.
 2. 从右向左看
 3. 如下两种效果相同：
    #+BEGIN_SRC css
      em {
          color: red;
      }
      .project em {
          color: red;
      }
      .architect .project em {
          color: red;
      }
    #+END_SRC
    #+BEGIN_SRC css
      .project h2[lang|="es"] + p em {
          color: red;
      }
    #+END_SRC
 4. 除非需要更高的特殊性，否则越简单越好
**** TODO [#B] 为文本添加样式
     DEADLINE: <2016-08-25 四>
     :LOGBOOK:
     CLOCK: [2016-08-25 四 13:21]--[2016-08-25 四 14:45] =>  1:24
     :END:
***** 本章之前与本章之后
***** 选择字体系列
 1. 方法为font-family: name，如下代码：
    #+BEGIN_SRC css
      body {
          font-family: Geneva;
      }

      h1,
      h2 {
          font-family: "Gill Sans";
      }
    #+END_SRC
 2. 对于包含多个单词的字体名称，用引号（单引或双引）包围起来.
 3. 使用通用的font属性可以一次性定义字体、大小和行高
***** 指定替代字体
 1. 浏览器会使用列表中第一个已安装在访问者系统内的字体
 2. 方法为font-family: name, name2, ..., serif/sans-serif
 3. 字体列表中至少包含三个字体：希望使用的字体、一个或几个替代字体，以及一个表
    示类属的标准字体
***** 创建斜体
 1. 创建斜体font-style: italic/oblique
 2. 取消斜体font-style: normal
 3. 代码如：
    #+BEGIN_SRC css
      p {
          font-style: italic;
      }
    #+END_SRC
 4. font-style属性是继承的
***** 应用粗体格式
 1. 应用粗体格式font-weight: bold;
 2. 取消粗体格式font-weight: normal;
 3. font-weight属性是继承的
***** 设置字体大小
 1. 指定大小有两种方式：像素大小（px）和相对父元素的大小（百分数、em及rem）
 2. font-size: 16px/100%/.9375em
 3. 建议使用em这样的相对单位，1em等于默认的字体大小
 4. 将body设置为100%
 5. 代码如下：
    #+BEGIN_SRC css
      body {
          font-family: Geneva, Tahoma, Verdana, sans-serif;
          font-size: 100%; /* 16px */
      }

      h1,
      h2 {
          font-family: "Gill Sans", "Gill Sans MT", Calibri, sans-serif;
          font-weight: normal;
      }

      h1 {
          font-size: 2.1875em; /* 35px/16px */
      }

      h2 {
          font-size: 1.75em; /* 28px/16px */
      }

      em,
      a:link,
      .intro .subhead {
          font-weight: bold;
      }

      .intro .subhead {
          font-size: 1.125em; /* 18px/16px */
      }

      .intro p {
          font-size: 1.0625em; /* 17px/16px */
      }

      .project p {
          font-size: .9375em; /* 15px/16px */
      }

    #+END_SRC
 6. CSS3引入新的单位rem(root em)，总是以根元素为参照系，根元素为html，代码如下：
    #+BEGIN_SRC css
      html {
      /* typically font-size: 100% will map to 16px unless your visitor
         has increased or decreased the font size in his or her browser */
          font-size: 100%;
      }

      body {
          font-family: Geneva, Tahoma, Verdana, sans-serif;
          font-size: 100%; /* 16px */
      }

      h1,
      h2 {
          font-family: "Gill Sans", "Gill Sans MT", Calibri, sans-serif;
          font-weight: normal;
      }

      h1 {
          font-size: 35px; /* optional fallback for IE8 and other old browsers */
          font-size: 2.1875rem; /* 35px/16px */
      }

      h2 {
          font-size: 28px; /* optional fallback for IE8 and other old browsers */
          font-size: 1.75rem; /* 28px/16px */
      }

      em,
      a:link,
      .intro .subhead {
          font-weight: bold;
      }

      .intro .subhead {
          font-size: 18px; /* optional fallback for IE8 and other old browsers */
          font-size: 1.125rem; /* 18px/16px */
      }

      .intro p {
          font-size: 17px; /* optional fallback for IE8 and other old browsers */
          font-size: 1.0625rem; /* 17px/16px */
      }

      .intro a {
          font-size: 16px; /* optional fallback for IE8 and other old browsers */
          font-size: 1rem; /* was .941176em */
      }

      .project p {
          font-size: 15px; /* optional fallback for IE8 and other old browsers */
          font-size: .9375rem; /* 15px/16px */
      }

    #+END_SRC
 7. 大多数浏览器对body元素设置的默认字体大小为16像素
***** 设置行高
 1. line-height: n/a/p%;
 2. n为字体大小的倍数，a为em、像素或磅，p%为字体大小的百分数
***** 同时设置所有字体值
 1. 使用font简写属性同时设置字体样式、粗细、变体、大小、行高和字体系列
 2. 必须始终显式地声明字体大小和字体系列属性：先是字体大小，再是字体系列
 3. 行高如果出现就放在字体大小和斜杠后面
 4. 代码如下：
    #+BEGIN_SRC css
      body {
          font: 100% Geneva, Tahoma, Verdana, sans-serif;
      }

      h1,
      h2 {
          /* Can't combine these into
             font shorthand unless you include
             font size with them in the shorthand. */
          font-family: "Gill Sans", "Gill Sans MT", Calibri, sans-serif;
          font-weight: normal;
      }

      h1 {
          /* Can't combine these into
             font shorthand unless you include
             font family with them in the shorthand. */
          font-size: 2.1875em; /* 35px/16px */
          line-height: 1.19318; /* I left this out of book just to keep example simple */
      }

      h2 {
          font-size: 1.75em; /* 28px/16px */
      }

      em,
      a:link,
      .intro .subhead {
          font-weight: bold;
      }

      .intro {
          line-height: 1.45;
      }

      .intro .subhead {
          font-size: 1.125em; /* 18px/16px */
      }

      .intro p {
          font-size: 1.0625em; /* 17px/16px */
      }

      .project p {
          /* Can't combine these into
             font shorthand unless you include
             font family with them in the shorthand. */
          font-size: .9375em; /* 15px/16px */
          line-height: 1.65;
      }
    #+END_SRC
***** 设置颜色
***** 设置背景
***** 控制间距
***** 添加缩进
***** 对齐文本
***** 修改文本的大小写
***** 使用小型大写字母
***** 装饰文本
***** 设置空白属性
**** TODO [#B] 用CSS进行布局
     DEADLINE: <2016-08-26 五>
***** 开始布局的注意事项
***** 构建页面
***** 在旧版浏览器中为HTML5元素添加样式
***** 对默认样式进行重置或标准化
***** 盒模型
***** 控制元素的显示类型和可见性
***** 设置元素的高度和宽度
***** 在元素周围添加内边距
***** 设置边框
***** 设置元素周围的外边距
***** 使元素浮动
***** 控制元素浮动的位置
***** 对元素进行相对定位
***** 对元素进行绝对定位
***** 在栈中定位元素
***** 处理溢出
***** 垂直对齐元素
***** 修改鼠标指针
**** TODO [#B] 构建响应式网站
     DEADLINE: <2016-08-26 五>
**** TODO [#B] 使用Web字体
     DEADLINE: <2016-08-27 六>
**** TODO [#B] 使用CSS3进行增强
     DEADLINE: <2016-08-27 六>
** 《DIV+CSS3网站布局：从入门到精通》
*** 网页设计基础与网站开发流程
**** 网页类型：
 + 静态网页：手动更新页面信息，以.html及.htm为扩展名。
 + 动态网页：通过网页脚本与语言自动处理、自动更新页面，以.asp/.aspx/.php/.jsp为扩展名。
**** 实现动态网页的服务器技术主要包括:ASP/ASP.NET、PHP和JSP等。
 + ASP/ASP.NET(Active Server Pages):微软技术。
 + PHP(Hypetext Preprocessor,超文本预处理器)：开源技术。
 + JSP(Java Server Pages): Sun公司技术。
**** 动态网页和静态网页
 + 静态网页使用语言：HTML
 + 动态网页使用语言：HTML+ASP、HTML+PHP或HTML+JSP等
**** 网页设计流程
 + 画图和切图>编写代码>
 + 团队协作开发稍微复杂系统，分工更加明确。
**** 网站开发流程
***** 个人网站开发流程
****** 确定主题。结合兴趣、背景等
****** 选择域名。好记、易记
****** 学习网页设计和开发技术。HTML/CSS/JS/PHP等
****** 选择服务器技术。ASP+Access/PHP+MYSQL
****** 网站策划。
 1. 栏目与板块编排
 2. 目录结构
 3. 链接结构。是指页面之间相互链接的拓扑结构，它建立在目录结构的基础之上，但可
   以跨越目录。
 4. 网站风格设计
****** 数据结构规划
****** 准备网站内容
****** 程序开发。包括前台程序和后台程序，核心问题是编写后台程序。
****** 测试网站
****** 发布网站
****** 网站推广
****** 网站运行与维护
***** 应用项目开发流程
 1. 产品制作人，写产品计划书。
 2. 用户体验研究员，做调查分析。
 3. 信息建构师，设计产品架构。
 4. 互动设计师，作出互动流程。
 5. 视觉设计师和用户界面设计师，作出页面视觉设计。
 6. 前台工程师，前台开发。
 7. 后台工程师，后台开发。
 8. 用户体验研究员，做用户测试，确保质量。
***** 承包网站开发流程
承包网站的建设和开发与个人网站、网络项目的开发性质不同，它是开发者（或者网络公
司）与客户（或者企业）之间的互动过程，这里面涉及双方多轮交流、沟通的过程和环节。
** 复习
* JavaScript
** 其他
** 《JavaScript基础教程》
 1. 以例子为导向，没有系统讲解语言本身的要点，感觉不太适合作为入门书.
 2. 例子讲解的方式还算不错，功能逐渐完善，代码积少成多，伴随着思考深入的过程.
 3. 等到有时间了可以把里面的代码案例看看.
** 《Professional: Javascript for Web Developers》
*** Language Basics
**** SYNTAX
 1. Case-sensitivity
 2. Identifiers(camel case,the first letter is lowercase and each additional
    word is offset by a capital letter,like:firstSecond,myCar)
 3. Comment,uses C-style comments for both sing-line and block comments
 4. Statements,terminated by a semicolon, not required but preferred.
 5. Code block, using C-style syntax, beginning with a { and end with a }.
**** KEYWORDS AND RESERVED WORDS
 1. the complete list of keywords is as follows:
     |    | a-g       | h-n        | o-z    |
     |----+-----------+------------+--------|
     |  1 | break     | instanceof | return |
     |  2 | case      | if         | switch |
     |  3 | catch     | new        | typeof |
     |  4 | continue  |            | this   |
     |  5 | do        |            | throw  |
     |  6 | debugger* |            | try    |
     |  7 | default   |            | var    |
     |  8 | delete    |            | void   |
     |  9 | else      |            | while  |
     | 10 | finally   |            | with   |
     | 11 | for       |            |        |
     | 12 | function  |            |        |
     |----+-----------+------------+--------|
 2. the following is the complete list of reserved words defined in ECMA-262:
     |    | a-g      | h-n        | o-z          |
     |----+----------+------------+--------------|
     |  1 | abstract | int        | package      |
     |  2 | boolean  | interface  | private      |
     |  3 | byte     | implements | protected    |
     |  4 | char     | import     | public       |
     |  5 | class    | long       | short        |
     |  6 | const    | native     | static       |
     |  7 | debugger | let        | super        |
     |  8 | double   |            | synchronized |
     |  9 | enum     |            | throws       |
     | 10 | export   |            | transient    |
     | 11 | extends  |            | volatile     |
     | 12 | final    |            | yield        |
     | 13 | float    |            |              |
     | 14 | goto     |            |              |
     |----+----------+------------+--------------|
 3. In addition to the list of keywords and reserved words, ECMA-262, fifth
    edition, places restrictions on the names "eval" and "arguments".
**** VARIABLES
 1. To define a variable, use the var operator followed by the variable name,
    like this: var message; 
 2. Using the var operator to define a variable makes it local to the scope
    in which it was defined.
 3. By removing the var operator, the variable becomes global.
**** DATA TYPES
 1. There are 5 simple data types(also called primitive types) in ECMAScript:
    Undefined, Null, boolean, Number, and String.
 2. There is also 1 complex data type called Object.
**** 内容太多，语言风格稍显罗嗦，至少得看一个月，看完就来不及实践自己的项目了，应该作为进阶读本.
** DONE [#A] 《JavaScript DOM编程艺术》
   CLOSED: [2016-08-15 一 18:28]
   - CLOSING NOTE [2016-08-15 一 18:28] \\
     这本书除了能助我进入JavaScript世界之外所含的知识非常有限，要使能力有实际的替身
     还得去看更高级更全面的教程加上海量的实践.
   #+BEGIN: clocktable :maxlevel 2 :scope subtree
   #+CAPTION: Clock summary at [2016-08-15 一 18:27]
   | Headline                                 | Time       |          |
   |------------------------------------------+------------+----------|
   | *Total time*                             | *1d 11:36* |          |
   |------------------------------------------+------------+----------|
   | \_  TODO [#A] 《JavaScript DOM编程艺术》 |            | 1d 11:36 |
   #+END:
   DEADLINE: <2016-08-13 六> SCHEDULED: <2016-07-23 六>
 1. 三原则：平稳退化、渐进增强、以用户为中心
*** DONE 第一章 Javascript简史
    DEADLINE: <2016-07-23 六> SCHEDULED: <2016-07-23 六>
    CLOCK: [2016-07-30 六 14:35]--[2016-07-30 六 14:53] =>  0:18
 1. DOM是一套对文档的内容进行抽象和概念化的方法.
 2. DOM是一种API.
 3. W3C对DOM的定义：一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个
    接口动态地访问和修改文档的内容、结构和样式.
 4. 现代浏览器对DOM的特性的覆盖率都基本达到95%，可以实现"编写一次，随处运行"！
*** DONE 第二章 Javascript语法
    DEADLINE: <2016-07-24 日> SCHEDULED: <2016-07-24 日>
    CLOCK: [2016-07-30 六 15:17]--[2016-07-30 六 16:46] =>  1:29
**** 准备工作
 1. 嵌入JavaScript代码的三种方式
    1. 将JavaScript代码放到文档<head>标签中的<script>标签之间
    2. 将代码存为扩展名为.js的独立文件，让<head>部分的<script>标签的src属性指向该文件.
    3. 将<script>标签放到HTML文档的最后，</body>标签之前.
 2. 在互联网环境下，Web浏览器负责完成有关的解释和执行工作.
**** 语法
 1. 语句
 2. 注释，单行多行的注释规则与C的相同
 3. 变量
    1. 允许直接对变量赋值而无需事先声明
    2. 推荐提前声明，规则如var good;
    3. 不允许变量名中包含空格或标点符号($例外)
    4. 变量名允许包含字母、数字、美元符号和下划线（第一个字符不允许是数字）
    5. 驼峰格式是函数名、方法名和对象属性名的首选格式
 4. 数据类型\\
    Javascript不需要进行类型声明，它是一种弱类型(weakly typed)语言.有如下类型：
    1. 字符串，必须包在引号内，单引号或双引号都可. 
    2. 数值
    3. 布尔(boolean)值，只有true和false两个值
    4. 数组，用Array声明，其他如引用等同C类似
    5. 关联数组，下标用字符串代替，不推荐，应该使用更通用的对象(Object)
    6. 对象，用Object关键字，使用点号来获取属性
**** 操作
 1. 算数运算符
    1. 赋值、加减乘除、
    2. 加(+)有加法和拼接两种操作
    3. 快捷操作符(+=)可以一次完成"加法和赋值"
**** 条件语句
 1. if语句，同C
 2. 比较操作符(>,<,>=,<=,!=,==,!==,===)
 3. 逻辑操作符(&&,||,!)
**** 循环语句
 1. while循环
    #+BEGIN_SRC javascript
    while (condition) {
       statements;
    }
    #+END_SRC
 2. do...while循环
    #+BEGIN_SRC javascript
    do {
      statements;
    } while (condition);
    #+END_SRC
 3. for循环
    #+BEGIN_SRC javascript
    for (initial condition; test condition; alter condition) {
      statements;
    }
    #+END_SRC
**** 函数
 1. 使用关键词function，语法如下：
    #+BEGIN_SRC javascript
    function name(arguments) {
       statements;
    }
    #+END_SRC
 2. 可以定义任意多的参数，用逗号将他们分隔开.
 3. 用return返回值.
 4. 可以用var关键字明确为函数变量设定作用域，使用了var的变量为局部变量，没有使
    用的为全局变量.
**** 对象
 1. 包含在对象里的数据可以通过两种形式访问-属性(property)和方法(method)
    1. 属性是隶属于某个特定对象的变量
    2. 方法是只有某个特定对象才能调用的函数
 2. 通过点语法访问：
    #+BEGIN_SRC javascript
    Object.property
    Object.method()
    #+END_SRC
 3. 创建一个新实例使用new关键词，如var jeremy = new Person;
 4. 对象包括用户定义对象(user-defined object)和内建对象(native object)
 5. 内建对象，如Array,Math,Date等
 6. 宿主对象，运行环境(浏览器)提供的对象，如Form,Image,Element,document等
*** DONE 第三章 DOM
    DEADLINE: <2016-07-24 日> SCHEDULED: <2016-07-24 日>
    CLOCK: [2016-07-31 日 09:12]--[2016-07-31 日 11：31] => 2:19
**** DOM含义
 1. D，表document，文档
 2. O，表object，对象
 3. M，表model，模型
**** 节点（node）
 常见的三种：元素节点、文本节点和属性节点
 1. 元素节点（element node），如<body>,<p>,<ul>等
 2. 文本节点（text node），文本节点总是被包含在元素节点的内部
 3. 属性节点（attribute node），属性总是被放在起始标签中，所以属性节点总是被包含在元素节点中
**** 获取元素
 1. getElementById
    1. 此方法返回一个与那个有着给定id属性值的元素节点对应的对象
    2. 是document对象特有的函数
 2. getElementsByTagName
    1. 返回一个对象数组
    2. 可以用"*"包含文档中的每个元素
    3. 注意Elements，为复数，漏掉s的错误我犯了好多次，导致网页不能正常运行，原
       因又极难找到！！
 3. getElementsByClassName
    1. 返回一个具有相同类名的元素的数组
    2. 可以指定多个类名，只要在字符串参数中用空格分隔类名即可
**** 获取和设置属性
 1. getAttribute
    1. getAttribute方法不属于document对象，所以不能通过document对象调用
    2. 只能通过元素节点对象调用，可以与getElementByTagName方法合用
    3. 返回属性的值
 2. setAttribute
    1. 修改属性节点的值
    2. 只能用于元素节点
    3. 两个参数，如：object.setAttribute(attribute,value)
    4. 此方法并不改变源码内容，即动态刷新不影响文档的静态内容.
*** DONE 第四章 案例研究：JavaScript图片库
    DEADLINE: <2016-07-25 一> SCHEDULED: <2016-07-25 一>
    CLOCK: [2016-07-31 日 22:35]--[2016-07-31 日 23:13] =>  0:38
    CLOCK: [2016-07-31 日 17:35]--[2016-07-31 日 17:56] =>  0:21
    CLOCK: [2016-07-31 日 15:33]--[2016-07-31 日 16:28] =>  0:55
**** 事件处理函数
 语法如：event = "JavaScript statement(s)"
 1. onmouseover，鼠标悬停时触发动作
 2. onmouseout，鼠标离开时触发动作
 3. onclick，单击链接时触发动作
 4. onload，页面加载是执行
**** DOM属性
 1. childNodes
    1. 用来获取一个元素的所有子元素，它是包含这个元素所以子元素的数组
    2. 用法如：element.childnodes
 2. nodeType
    1. 返回属性值，格式如下：node.nodeType
    2. 返回数字
    3. 元素节点的nodeType属性值为1,属性节点为2,文本节点为3
 3. nodeValue
    1. 返回节点的值或i设置节点的值，格式如下：node.nodeValue
 4. firstChild
    1. 获取第一个子元素，用法如下：node.firstChild
    2. 同于node.childNode[+0]
 5. lastChild
    1. 获取最后一个子元素，用法如下：node.lastChild
    2. 同于node.childNodes[node.childNodes.length-1]
 6. nextSibling
    1. 获取下一个同胞节点，用法如下:node.nextSibling
*** DONE 第五章 最佳实践
    CLOCK: [2016-08-01 一 00:01]--[2016-08-01 一 00:52] =>  0:51
    CLOCK: [2016-07-26 二 21:47]--[2016-07-26 二 22:29] =>  0:42
    CLOCK: [2016-07-26 二 21:06]--[2016-07-26 二 21:41] =>  0:35
    CLOCK: [2016-07-26 二 20:21]--[2016-07-26 二 20:54] =>  0:33
    CLOCK: [2016-07-26 二 19:31]--[2016-07-26 二 20:09] =>  0:38
**** 平稳退化
 1. open()方法
    1. 属于window对象，用法为window.open(url,name,features)
    2. 三个参数都可选
    3. 第三个参数为逗号隔开的字符串，其内容为新窗口的各种特性
**** 渐进增强
 1. 所谓“渐进增强”就是用一些额外的信息层去包裹原始数据.按照此原则创建出来的
    网页几乎都符合“平稳退化”的原则.
**** 分离JavaScript
 1. 在外部JavaScript文件里把一个事件添加到某个元素上，格式为element.event = action...
**** 向后兼容
 1. 对象检测
    1. 有两种方式：检验合格和去除不和格的
    2. 检验合格的，格式为：
       #+BEGIN_SRC javascript
       if (method) {
          statement
       }
       #+END_SRC
    3. 去除不合格的，格式为：
       #+BEGIN_SRC javascript
       if (!method) {
          return false;
       }
       #+END_SRC
 2. 浏览器嗅探技术，事倍功半，不可取
**** 性能考虑
 1. 尽量少访问DOM和尽量减少标记
 2. 合并和放置脚本
 3. 压缩脚本
*** DONE 复习总结前五章
    DEADLINE: <2016-07-31 日>
*** DONE 第六章 案例研究：图片库改进
    CLOSED: [2016-08-03 三 00:39] DEADLINE: <2016-08-02 二>
    :LOGBOOK:
    CLOCK: [2016-08-03 三 00:05]--[2016-08-03 三 00:39] =>  0:34
    CLOCK: [2016-08-02 二 22:48]--[2016-08-02 二 23:54] =>  1:06
    CLOCK: [2016-08-02 二 21:21]--[2016-08-02 二 22:28] =>  1:07
    CLOCK: [2016-08-02 二 17:48]--[2016-08-02 二 19:21] =>  1:33
    :END:
**** 检查点
 1. 通过if语句进行对象检测
 2. 如果想用JavaCript给网页添加行为，就不该让JavaScript对这个网页的结构有任何
    依赖.
 3. 结构话程序设计原则：函数应该只有一个入口和一个出口
 4. 如果一个函数有多个出口，只要这些出口集中出现在函数的开头部分，就是可以接受
    的
**** 变量名
 1. 把长的常用的引用赋值给一个有意义的变量，这样可以省很多事
 2. 如var gallery = document.getElementById("imagegallery");
**** 遍历
 1. 使用for语句
 2. 计数器用i(increment)
**** 改变行为
 1. links[i].onclick = function()，links[i]元素所对应的链接被点击时执行
**** 共享onload事件
 1. window.onload = prepareGallery;
 2. addLoadEvent函数
**** 键盘访问
 1. onkeypress事件，与onclick相似
 2. 用onkeypress会出现很多问题，比如链接确认后不能跳出到下一个
 3. 最好不用onkeypress事件处理函数，onclick事件处理函数已经能满足需求.
*** DONE 第七章 动态创建标记
    CLOSED: [2016-08-04 四 23:08] DEADLINE: <2016-08-04 四>
    :LOGBOOK:
    CLOCK: [2016-08-04 四 17:25]--[2016-08-04 四 18:22] =>  0:57
    CLOCK: [2016-08-04 四 11:12]--[2016-08-04 四 13:40] =>  2:28
    :END:
**** 传统方法
 1. document.write
    1) 方便快捷地把字符串插入到文档中
    2) 其最大缺点是违背了"行为应该与表现分离"的原则
    3) 应该避免在<body>部分乱用<script>标签，避免使用document.write方法
 2. innerHTML
    1) 读取或写入HTML字符串
    2) 无法区分插入和替换，一旦使用全部内容都被替换
    3) innerHTML是HTML专有属性，不能用于任何其他标记语言文档
    4) 在任何时候，标准的DOM都可以用来替代innerHTML
**** DOM方法
 动态方式创建标记实际上，并不是在创建标记，而是在改变DOM节点树
 1. createElement
    1) 创建元素节点，语法为document.createElement("p");
    2) 上例中nodeName为p，nodeType为1，即元素节点，其他依次类推.
 2. appendChild
    1) 让新建的节点成为某元素的子节点
    2) 语法为parent.appendChild(child)
    3) parent等元素可以用getElementById()等方法获得，child为新建的字节点
    4) 次方法还可以用来连接那些尚未成为文档树一部分的节点
 3. createTextNode
    1) 创建文本节点
    2) 语法为document.createTextNode("Hello world");
    3) 可以用appendChild将其插入为某个元素的字节点
 4. insertBefore
    1) 把一个新元素插入到现有元素的前面
    2) 语法为parentElement.insertBefore(newElement,targetElement)
    3) parentElement可以用targetElement.parentNode代替
    4) 在DOM中元素节点的父元素必须是另一个元素节点
**** 一个更复杂的组合
 1. 用DOM方法代替document.write方法或innerHTML属性
 2. 可用两种方式
    1) 从左向右，依次序建立完备的新节点，建立一个追加一个
    2) 按步骤来，新建所有节点>>追加新节点>>添加到文档，本人觉得这种更清晰，但
       当节点太多时，可能没有第一种简洁.
**** 重回图片库
 1. 用createElement等方法替换html脚本中的img及p标签
 2. 自建函数insertAfter()
    #+BEGIN_SRC js
    function insertAfter(newElement,targetElement) {
       var parent = targetElement.parentNode;
       if (parent.lastChild == targetElement) {
         parent.appendChild(newElement);
       } else {
       parent.insertBefore(newElement,targetElement.nextSibling);
       }
    }    
    #+END_SRC
 3. 将img放在ul节点后面，将p节点放在img节点后面
**** Ajax
    使用Ajax可以做到只更新页面中的一小部分，已经加载的页面中只有一小部分区域会
    更新，而不必再次加载整个页面.
 1. XHLHttpRequest对象
    1. 作为浏览器与服务器之间的中间人，它只是负责传递请求和响应
 2. Hijax，渐进增强地使用Ajax
 3. Ajax应用主要依赖于服务器端处理，而非客户端处理
*** DONE 第八章 充实文档的内容
    CLOSED: [2016-08-06 六 12:34] SCHEDULED: <2016-08-04 四> DEADLINE: <2016-08-05 五>
    - CLOSING NOTE [2016-08-06 六 12:34] \\
      可以快速地阅读了，因为时间紧张没有逐个敲代码.
    :LOGBOOK:
    CLOCK: [2016-08-06 六 12:25]--[2016-08-06 六 12:33] =>  0:08
    CLOCK: [2016-08-06 六 11:18]--[2016-08-06 六 11:47] =>  0:29
    CLOCK: [2016-08-06 六 10:07]--[2016-08-06 六 11:06] =>  0:59
    CLOCK: [2016-08-05 五 09:29]--[2016-08-05 五 11:06] =>  1:37
    :END:
**** 两个原则
 1. 渐进增强
 2. 平稳退化
**** 显示"缩略语列表"
 1. for/in循环
    1. 格式为for(variable in array)
    2. 在进入第一次循环时，变量variable将被赋值为数组array的第一个元素的下标值
 2. 这部分主要就是用前面的知识创建列表(<dl>)、标题(<dt>)及描述(<dd>)标签
 3. 引用body标签的具体做法有两种：
    1. 使用DOM Core：document.getElementsByTagName("body")[+0]
    2. 使用HTML-DOM：document.body
**** 显示"文档来源链接表"
**** 显示"快捷键清单"
**** 非常3+5(检索和添加信息)
 1. 在需要对文档里的现有信息进行检索时，以下3种DOM方法最有用：
    1. getElementById
    2. getElementsByTagName
    3. getAttribute
 2. 在需要把信息添加到文档里去时，一下5种DOM方法最有用：
    1. createElement
    2. createTextNode
    3. appendChild
    4. insertBefore
    5. setAttribute
*** DONE 第九章 CSS-DOM
    CLOSED: [2016-08-07 日 11:37] SCHEDULED: <2016-08-04 四> DEADLINE: <2016-08-05 五>
    - CLOSING NOTE [2016-08-07 日 11:37] \\
      帮张的忙以及解决emacs之org-mode的输出文件为html格式的问题推迟了该任务的完成.
    :LOGBOOK:
    CLOCK: [2016-08-07 日 11:25]--[2016-08-07 日 11:37] =>  0:12
    CLOCK: [2016-08-07 日 10:22]--[2016-08-07 日 10:58] =>  0:36
    CLOCK: [2016-08-06 六 13:48]--[2016-08-06 六 14:54] =>  1:06
    :END:
**** 三位一体的网页
 1. 结构层(structural layer)，使用(X)HTML去搭建文档的结构
 2. 表示层(presentation layer)，使用CSS去设置文档的呈现效果
 3. 行为层(behavior layer)，使用DOM脚本去实现文档的行为
**** style属性
 1. 文档的每个元素节点都有一个style属性，它元素的样式
 2. 查询这个属性将返回一个*对象*而不是一个简单的字符串，即style对象
 3. 引用属性element.style.color
 4. style只能返回内嵌样式
 5. style对象的各个属性都是可读写的，如element.style.property = value
**** 何时该用DOM脚本设置样式
 在使用CSS不方便的场合，可以用DOM对文档的样式做一些小的增强
 1. 根据元素在节点树里的位置来设置样式、
 2. 根据某种条件反复设置某种样式
 3. 响应事件
**** className属性  
 1. 是一个可读/可写的属性，凡是元素节点都有这个属性
*** DONE 第十章 用JavaScript实现动画效果
    CLOSED: [2016-08-07 日 23:51] SCHEDULED: <2016-08-04 四> DEADLINE: <2016-08-06 六>
    :LOGBOOK:
    CLOCK: [2016-08-07 日 23:32]--[2016-08-07 日 23:51] =>  0:19
    CLOCK: [2016-08-07 日 21:35]--[2016-08-07 日 23:01] =>  1:26
    CLOCK: [2016-08-07 日 19:27]--[2016-08-07 日 19:50] =>  0:23
    CLOCK: [2016-08-07 日 17:49]--[2016-08-07 日 18:52] =>  1:03
    CLOCK: [2016-08-07 日 15:02]--[2016-08-07 日 16:18] =>  1:16
    :END:
**** 动画基础知识
 1. 位置，position属性，有如下四种合法值
    1. static，同relative相似，按标记出现的先后顺序
    2. fixed
    3. relative，与static相似，可从正常显示顺序里脱离出来
    4. absolute，可以出现在容器的任何位置，由top、left、right、bottom等属性决
       定
 2. 时间
    1. setTimeout函数，让某个函数在经过一段预订的时间之后才开始执行，语法为
       setTimeout("function", interval)，interval为以毫秒为单位执行的数字
    2. clearTimeout函数，取消等待执行队列里的某个函数，语法为clearTimeout(variable)
 3. 时间递增量
    1. 获得元素的当前位置，用到parseInt函数来提取数字
    2. 如果元素已经到达它的目的地，则退出这个函数
    3. 如果元素尚未到达它的目的地，则把它向目的地移近一点
    4. 经过一段时间间隔之后从步骤1开始重复上述步骤
 4. 抽象
    1. 创建moveElement函数，每次调用新函数可能变化的东西有四个：
       1. 打算移动的元素的ID，elementID
       2. 该元素的目的地的"左"位置，final_x
       3. 该元素的目的地的"上"位置，final_y
       4. 两次移动之间的停顿时间，interval
	代码如下：
	#+BEGIN_SRC javascript
      function moveElement(elementID,final_x,final_y,interval) {
      if (!document.getElementById) return false;
      if (!document.getElementById(elementID)) return false;
      var elem = document.getElementById(elementID);
      var xpos = parseInt(elem.style.left);
      var ypos = parseInt(elem.style.top);
      if (xpos == final_x && ypos == final_y) {
	return true;
      }
      if (xpos < final_x) {
	xpos++;
      }
      if (xpos > final_x) {
	xpos--;
      }
      if (ypos < final_y) {
	ypos++;
      }
      if (ypos > final_y) {
	ypos--;
      }
      elem.style.left = xpos + "px";
      elem.style.top = ypos + "px";
      var repeat = "moveElement('"+elementID+"',"+final_x+","+final_y+","+interval+")";
      movement = setTimeout(repeat,interval);
    }
	#+END_SRC    
    2. 使用moveElement函数
       + 在html文档中添加元素，再在js文档中代入相关信息，最后再在结构文档中添
         加引用即可
**** 实用的动画
 1. 提出问题
    + onmouseover事件被触发时显示一张图片
 2. 解决问题
    1. 为所有的预览图片生成为一张"集体照"形式的图片
    2. 隐藏这张"集体照"图片的绝大部分
    3. 当用户把鼠标旋停在某个链接的上方时，只显示这张"集体照"图片的相应部分
 3. CSS
    CSS的overflow属性用来处理一个元素的尺寸超出容器尺寸的情况，overflow属性的
    可取值有四种：
    1. visible，不裁剪溢出的内容
    2. hidden，隐藏溢出的内容
    3. scroll，类似于hidden，但显示滚动条可以看到其他部分
    4. auto，类似于scroll，但内容没有溢出就不显示滚动条
    最适合的是hidden元素
 4. JavaScript
    + 用moveElement函数来移动图片，根据用户把鼠标指针旋停在哪个链接上，我们将
      这个图片向左或向右移动.
 5. *变量作用域问题*
    1. 创建属性，语法如element.property = value，其中property可以自定义
 6. 改进动画效果
    1. 根据与目的的距离决定每次移动的步伐大小
    2. 用到Math对象的ceil方法，语法为Math.ceil(number)，它将把浮点数number向"
       大于"方向舍入为与之最接近的整数
 7. 添加安全检查
 8. 生成HTML标记
    + 将为了能够用JavaScript代码实现动画效果而存在的标记用DOM去创建
*** DONE 第十一章 HTML5
    CLOSED: [2016-08-08 一 22:37] SCHEDULED: <2016-08-04 四> DEADLINE: <2016-08-06 六>
    :LOGBOOK:
    CLOCK: [2016-08-08 一 20:32]--[2016-08-08 一 22:37] =>  2:05
    :END:
**** HTML5简介
**** 来自朋友的忠告\\
 1. 使用Modernizr工具.
 2. 使用Modernizr非常简单，从http://www.modernizr.com/ 下载它，将在文档的
    <head>中添加该脚本：
   #+BEGIN_SRC html
   <script src="modernizr-1.5.min.js"></script>
   #+END_SRC
**** 几个示例
 1. Canvas
 2. 音频和视频，<video>及<audio>
    1. 也有混乱的时候，没有一款浏览器支持所有容器和编解码器，因此我们必须提供
       多种后备格式
    2. 自定义控件，通过DOM属性去实现
 3. 表单
**** HTML5还有其他特性吗
**** 小节
*** DONE 第十二章 综合示例
    CLOSED: [2016-08-13 六 17:58]
    :PROPERTIES:
    :Effort:   7:00
    :END:
    - CLOSING NOTE [2016-08-13 六 17:58] \\
      除了最后的Ajax的内容稍显困难之外，其余内容基本可以看得很顺，相信我也可以
      自己做出来只要不是新知识的鸿沟，其他的都是可以现场克服的.
    #+BEGIN: clocktable :maxlevel 2 :scope subtree
    #+CAPTION: Clock summary at [2016-08-15 一 18:27]
    | Headline     | Time   |
    |--------------+--------|
    | *Total time* | *6:50* |
    |--------------+--------|
    #+END:
    DEADLINE: <2016-08-12 五> SCHEDULED: <2016-08-04 四>
    :PROPERTIES:
    :Effort:   7:00
    :END:
    :LOGBOOK:
    CLOCK: [2016-08-13 六 16:43]--[2016-08-13 六 17:56] =>  1:13
    CLOCK: [2016-08-13 六 11:25]--[2016-08-13 六 12:00] =>  0:35
    CLOCK: [2016-08-13 六 10:42]--[2016-08-13 六 11:18] =>  0:36
    CLOCK: [2016-08-12 五 23:25]--[2016-08-13 六 01:08] =>  1:43
    CLOCK: [2016-08-12 五 16:44]--[2016-08-12 五 17:59] =>  1:15
    CLOCK: [2016-08-10 三 22:07]--[2016-08-10 三 22:57] =>  0:50
    CLOCK: [2016-08-08 一 23:27]--[2016-08-08 一 23:47] =>  0:20
    CLOCK: [2016-08-08 一 22:59]--[2016-08-08 一 23:17] =>  0:18
    :END:
**** DONE 项目简介
     CLOSED: [2016-08-08 一 23:47]
     - CLOSING NOTE [2016-08-08 一 23:47]
 1. 原始资料
    + 这个网站不需要太多的页面，它本质上就是一个宣传手册.
 2. 站点结构
    1. 目录结构：
       |------+------------+--------------------|
       | 序号 | 站点文件夹 | 作用               |
       |------+------------+--------------------|
       |    1 | /images    | 保存要用的图片     |
       |    2 | /styles    | 保存CSS文件        |
       |    3 | /scripts   | 保存JavaScript文件 |
       |------+------------+--------------------|
    2. 页面拓扑
       |------+---------+--------------+--------------|
       | 序号 | 页面    | 页面文件     | 作用         |
       |------+---------+--------------+--------------|
       |    1 | Home    | index.html   | 主页         |
       |    2 | About   | about.html   | 介绍背景信息 |
       |    3 | Photos  | photos.html  | 存放照片     |
       |    4 | Live    | live.html    | 巡演日程安排 |
       |    5 | Contact | contact.html | 联系页面     |
       |------+---------+--------------+--------------|
 3. 页面结构
    |------+-----------+--------------------------------------|
    | 序号 | 标签      | 作用                                 |
    |------+-----------+--------------------------------------|
    |    1 | <header>  | 头部区域，品牌性信息，也存放logo     |
    |    2 | <nav>     | 导航区域，包含一组指向各个页面的链接 |
    |    3 | <article> | 内容区域，包含实质性内容             |
    |------+-----------+--------------------------------------|
**** DONE 设计
     CLOSED: [2016-08-10 三 22:13]
     - CLOSING NOTE [2016-08-10 三 22:13]
 1. background.gif，背景图片
 2. logo.gif，品牌图像
 3. navbar.gif，导航条
 4. guitarist.gif，人物剪影
    把这些图片放在images文件夹中
**** DONE CSS
     CLOSED: [2016-08-10 三 22:40]
     - CLOSING NOTE [2016-08-10 三 22:40]
 1. layout.css，整体布局样式
 2. color.css，颜色样式
 3. typography.css，版式样式\\
    创建basic.css，把上面三个样式表导入这个基本的样式表中，代码为：
    #+BEGIN_SRC css
    @import url(layout.css);
    @import url(color.css);
    @import url(typography.css);
    #+END_SRC
    四个css文件一起放在styles文件夹中.
**** DONE 标记
     CLOSED: [2016-08-10 三 22:57]
     - CLOSING NOTE [2016-08-10 三 22:57]
**** DONE JavaScript
     - CLOSING NOTE [2016-08-13 六 17:51] 
     先在scripts文件夹中创建global.js，在其中添加几个整个站点都会用到的函数，
     包含：addLoadEvent函数，insertAfter函数，addClass函数.
 1. 页面突出显示
    1. 取得导航列表中所有链接
    2. 循环遍历这些链接
    3. 如果发现了与当前URL匹配的链接，为他添加here类\\
    新属性及新方法：
    * window.location.href，取得当前页面的URL
    * indexOf方法，用于在字符串中寻找子字符串的位置，引用string.indexOf(substring)\\
    * toLowerCase()，把文本转化为小写字母
    highlightPage函数源码为：
    #+BEGIN_SRC js
      function highlightPage() {
          if (!document.getElementsByTagName) return false;
          if (!document.getElementById) return false;  
          var headers = document.getElementsByTagName('header');
          if (headers.length == 0) return false;
          var navs = headers[0].getElementsByTagName('nav');
          if (navs.length == 0) return false;

          var links = navs[0].getElementsByTagName("a");
          for (var i=0; i<links.length; i++) {
              var linkurl;
              for (var i=0; i<links.length; i++) {
                  linkurl = links[i].getAttribute("href");
                  if (window.location.href.indexOf(linkurl) != -1) {
                      links[i].className = "here";
                      var linktext = links[i].lastChild.nodeValue.toLowerCase();
                      document.body.setAttribute("id",linktext);
                  }
              }
          }
      }
    #+END_SRC
 2. JavaScript幻灯片
    * 创建一个frame边框，把slideshow长条图放在其中展示，代码如下：
    #+BEGIN_SRC js
      function prepareSlideshow() {
          if (!document.getElementsByTagName) return false;
          if (!document.getElementById) return false;
          if (!document.getElementById("intro")) return false;
          var intro = document.getElementById("intro");
          var slideshow = document.createElement("div");
          slideshow.setAttribute("id","slideshow");
          var frame = document.createElement("img");
          frame.setAttribute("src","images/frame.gif");
          frame.setAttribute("alt","");
          frame.setAttribute("id","frame");
          slideshow.appendChild(frame);
          var preview = document.createElement("img");
          preview.setAttribute("src","images/slideshow.gif");
          preview.setAttribute("alt","a glimpse of what awaits you");
          preview.setAttribute("id","preview");
          slideshow.appendChild(preview);
          insertAfter(slideshow,intro);
          var links = document.getElementsByTagName("a");
          for (var i=0; i<links.length; i++) {
              links[i].onmouseover = function() {
                  var destination = this.getAttribute("href");
                  if (destination.indexOf("index.html") != -1) {
                      moveElement("preview",0,0,5);
                  }
                  if (destination.indexOf("about.html") != -1) {
                      moveElement("preview",-150,0,5);
                  }
                  if (destination.indexOf("photos.html") != -1) {
                      moveElement("preview",-300,0,5);
                  }
                  if (destination.indexOf("live.html") != -1) {
                      moveElement("preview",-450,0,5);
                  }
                  if (destination.indexOf("contact.html") != -1) {
                      moveElement("preview",-600,0,5);
                  }
              }
          }
      }
    #+END_SRC
 3. 内部导航
    1. 单击<nav>中的每个链接，都会跳到带有相应id属性的<section>
    2. 选择性的每次只显示其中一个部分(section)
    3. split方法，根据分割符把一个字符串分成两或多部分，格式如下：
    #+BEGIN_SRC js
      array = string.split(character);
    #+END_SRC
    1. showSection函数与prepareInternalnav函数如下：\\
    #+BEGIN_SRC js
      function showSection(id) {
          var sections = document.getElementsByTagName("section");
          for (var i=0; i<sections.length; i++ ) {
              if (sections[i].getAttribute("id") != id) {
                  sections[i].style.display = "none";
              } else {
                  sections[i].style.display = "block";
              }
          }
      }

      function prepareInternalnav() {
          if (!document.getElementsByTagName) return false;
          if (!document.getElementById) return false;
          var articles = document.getElementsByTagName("article");
          if (articles.length == 0) return false;
          var navs = articles[0].getElementsByTagName("nav");
          if (navs.length == 0) return false;
          var nav = navs[0];
          var links = nav.getElementsByTagName("a");
          for (var i=0; i<links.length; i++ ) {
              var sectionId = links[i].getAttribute("href").split("#")[1];
              if (!document.getElementById(sectionId)) continue;
              document.getElementById(sectionId).style.display = "none";
              links[i].destination = sectionId;
              links[i].onclick = function() {
                  showSection(this.destination);
                  return false;
              }
          }
      }
    #+END_SRC
 4. JavaScript图片库
    1. 四张照片400*300px，放在images/photos中，再创建4张缩略图也放其中
    2. 创建一组链接，设置标签及其属性值
    3. 制作占位符图片placeholder.gif放到images/中
    4. 把第六、七章的图片库脚本放入scripts/global.js中，源码如下：\\
    #+BEGIN_SRC js
      function showPic(whichpic) {
          if (!document.getElementById("placeholder")) return true;
          var source = whichpic.getAttribute("href");
          var placeholder = document.getElementById("placeholder");
          placeholder.setAttribute("src",source);
          if (!document.getElementById("description")) return false;
          if (whichpic.getAttribute("title")) {
              var text = whichpic.getAttribute("title");
          } else {
              var text = "";
          }
          var description = document.getElementById("description");
          if (description.firstChild.nodeType == 3) {
              description.firstChild.nodeValue = text;
          }
          return false;
      }

      function preparePlaceholder() {
          if (!document.createElement) return false;
          if (!document.createTextNode) return false;
          if (!document.getElementById) return false;
          if (!document.getElementById("imagegallery")) return false;
          var placeholder = document.createElement("img");
          placeholder.setAttribute("id","placeholder");
          placeholder.setAttribute("src","images/placeholder.gif");
          placeholder.setAttribute("alt","my image gallery");
          var description = document.createElement("p");
          description.setAttribute("id","description");
          var desctext = document.createTextNode("Choose an image");
          description.appendChild(desctext);
          var gallery = document.getElementById("imagegallery");
          insertAfter(description,gallery);
          insertAfter(placeholder,description);
      }

      function prepareGallery() {
          if (!document.getElementsByTagName) return false;
          if (!document.getElementById) return false;
          if (!document.getElementById("imagegallery")) return false;
          var gallery = document.getElementById("imagegallery");
          var links = gallery.getElementsByTagName("a");
          for ( var i=0; i < links.length; i++) {
              links[i].onclick = function() {
                  return showPic(this);
              }
          }
      }
    #+END_SRC
 5. 增强表格
    1. 书写巡演表格数据<table>，放到live.html中的<article>元素中
    2. 将第九章的stripeTables及highlightRows函数及第8章的displayAbbreviations
       函数添加到global.js中，代码为：\\
    #+BEGIN_SRC js
      function stripeTables() {
          if (!document.getElementsByTagName) return false;
          var tables = document.getElementsByTagName("table");
          for (var i=0; i<tables.length; i++) {
              var odd = false;
              var rows = tables[i].getElementsByTagName("tr");
              for (var j=0; j<rows.length; j++) {
                  if (odd == true) {
                      addClass(rows[j],"odd");
                      odd = false;
                  } else {
                      odd = true;
                  }
              }
          }
      }

      function highlightRows() {
          if(!document.getElementsByTagName) return false;
          var rows = document.getElementsByTagName("tr");
          for (var i=0; i<rows.length; i++) {
              rows[i].oldClassName = rows[i].className
              rows[i].onmouseover = function() {
                  addClass(this,"highlight");
              }
              rows[i].onmouseout = function() {
                  this.className = this.oldClassName
              }
          }
      }

      function displayAbbreviations() {
          if (!document.getElementsByTagName || !document.createElement || !document.createTextNode) return false;
          var abbreviations = document.getElementsByTagName("abbr");
          if (abbreviations.length < 1) return false;
          var defs = new Array();
          for (var i=0; i<abbreviations.length; i++) {
              var current_abbr = abbreviations[i];
              if (current_abbr.childNodes.length < 1) continue;
              var definition = current_abbr.getAttribute("title");
              var key = current_abbr.lastChild.nodeValue;
              defs[key] = definition;
          }
          var dlist = document.createElement("dl");
          for (key in defs) {
              var definition = defs[key];
              var dtitle = document.createElement("dt");
              var dtitle_text = document.createTextNode(key);
              dtitle.appendChild(dtitle_text);
              var ddesc = document.createElement("dd");
              var ddesc_text = document.createTextNode(definition);
              ddesc.appendChild(ddesc_text);
              dlist.appendChild(dtitle);
              dlist.appendChild(ddesc);
          }
          if (dlist.childNodes.length < 1) return false;
          var header = document.createElement("h3");
          var header_text = document.createTextNode("Abbreviations");
          header.appendChild(header_text);
          var articles = document.getElementsByTagName("article");
          if (articles.length == 0) return false;
          articles[0].appendChild(header);
          articles[0].appendChild(dlist);
      }
    #+END_SRC
 6. 增强表单\\
    创建contact.html，<article>中包含一个<form>
    1. 字段标签，有三个字段：name、email和message，如果label中的文本被单击，关
       联的表单字段就会获得焦点，对不支持的浏览器准备如下代码：\\
       #+BEGIN_SRC js
         function focusLabels() {
             if (!document.getElementsByTagName) return false;
             var labels = document.getElementsByTagName("label");
             for (var i=0; i<labels.length; i++) {
                 if (!labels[i].getAttribute("for")) continue;
                 labels[i].onclick = function() {
                     var id = this.getAttribute("for");
                     if (!document.getElementById(id)) return false;
                     var element = document.getElementById(id);
                     element.focus();
                 }
             }
         }
       #+END_SRC
    2. 占位符值，placeholder属性中文本，"Your name"、"Your email address"等，
       在不支持html5的浏览器准备了resetFields及prepareForms函数，代码如下：\\
       #+BEGIN_SRC js
         function resetFields(whichform) {
             if (Modernizr.input.placeholder) return;
             for (var i=0; i<whichform.elements.length; i++) {
                 var element = whichform.elements[i];
                 if (element.type == "submit") continue;
                 if (!element.getAttribute('placeholder')) continue;
                 element.onfocus = function() {
                     if (this.value == this.getAttribute('placeholder')) {
                         this.value = "";
                     }
                 }
                 element.onblur = function() {
                     if (this.value == "") {
                         this.value = this.getAttribute('placeholder');
                     }
                 }
                 element.onblur();
             }
         }

         function prepareForms() {
             for (var i=0; i<document.forms.length; i++) {
                 var thisform = document.forms[i];
                 resetFields(thisform);
                 thisform.onsubmit = function() {
                     if (!validateForm(this)) return false;
                     var article = document.getElementsByTagName('article')[0];
                     if (submitFormWithAjax(this, article)) return false;
                     return true;
                 }
             }
         }
       #+END_SRC
    3. 表单验证，主要验证是否空白(isFilled)或格式是否正确(isEmail)，为必填的项
       目增加特别的样式(validateForm)，在prepareForms函数中通过onsubmit事件处理
       函数添加验证行为，代码如下：
       #+BEGIN_SRC js
         function validateForm(whichform) {
             for (var i=0; i<whichform.elements.length; i++) {
                 var element = whichform.elements[i];
                 if (element.getAttribute("required") == 'required') {
                     if (!isFilled(element)) {
                         alert("Please fill in the "+element.name+" field.");
                         return false;
                     }
                 }
                 if (element.getAttribute("type") == 'email') {
                     if (!isEmail(element)) {
                         alert("The "+element.name+" field must be a valid email address.");
                         return false;
                     }
                 }
             }
             return true;
         }

         function isFilled(field) {
             return (field.value.length > 1 && field.value != field.placeholder);
         }

         function isEmail(field) {
             return (field.value.indexOf("@") != -1 && field.value.indexOf(".") != -1);
         }

         function prepareForms() {
             for (var i=0; i<document.forms.length; i++) {
                 var thisform = document.forms[i];
                 resetFields(thisform);
                 thisform.onsubmit = function() {
                     if (!validateForm(this)) return false;
                     var article = document.getElementsByTagName('article')[0];
                     if (submitFormWithAjax(this, article)) return false;
                     return true;
                 }
             }
         }
       #+END_SRC
    4. *提交表单* ，有点晕，等网上的视频教程等看完及实践后再回来看吧！
 7. 压缩代码
    1. 用Closure Compiler压缩代码，网址为http://closure-compiler.appspot.com/home
    2. 压缩后的代码命名为global.min.js，放入scripts文件夹
    3. 把所有页面的<scripts>标签中引用的脚本改为这个压缩版.
 8. 小结
**** DONE 小节
     CLOSED: [2016-08-13 六 17:56]
     - CLOSING NOTE [2016-08-13 六 17:56]
*** DONE 附录 JavaScript库
    CLOSED: [2016-08-15 一 18:24]
    - CLOSING NOTE [2016-08-15 一 18:24] \\
      只是简单地介绍非常有限的子集，追求完整的功能还得系统地去学习相应的知识
    :LOGBOOK:
    CLOCK: [2016-08-15 一 18:13]--[2016-08-15 一 18:24] =>  0:11
    CLOCK: [2016-08-15 一 17:55]--[2016-08-15 一 18:05] =>  0:10
    CLOCK: [2016-08-15 一 11:10]--[2016-08-15 一 12:05] =>  0:55
    CLOCK: [2016-08-13 六 21:47]--[2016-08-13 六 22:53] =>  1:06
    :END:
**** DONE 选择合适的库
     CLOSED: [2016-08-13 六 22:35]
     - CLOSING NOTE [2016-08-13 六 22:35]
 1. 如果同时使用多个库，重复功能和冗余代码也是不可避免的
 2. 功能过多会影响下载速度
 3. 模块化可以至加载相应功能的文件，从而降低下载量
 4. 动态加载文件时，一次请求一个大文件要比多次请求多个小文件更好
***** 有代表性的库
 1. jQuery，
 2. Prototype
 3. The Yahoo!User Interface (YUI) Library
 4. Dojo Toolkit
 5. MooTools，
***** 内容分发网络
 1. 内容分发网络(CDN,Content Delevery Network)，可以解决分布共享库的问题.
 2. Google为上面5个库提供了免费的CDN服务.
**** DONE 语法
     CLOSED: [2016-08-13 六 22:51]
     - CLOSING NOTE [2016-08-13 六 22:51]
 1. 很多库都把$()函数作为其选择器方法的简写
 2. 多数库都支持以点将方法连缀起来的语法，也就是通过点操作符把多个方法调用连接
    成一行代码，如$('p').removeClass('classFoo').addClass('classBar');
 3. 迭代，不少库都提供了方便对元素列表进行操作的循环结构，如下面两种方式同效：
    #+BEGIN_SRC js
      var item = document.getElementsByTagname("li");
      for (var i=0; i<item.length; i++) {
          alert(typeof items[i]);
      }

      $('li').each(function(i){
          alert(typeof this);
      })
    #+END_SRC
**** DONE 选择元素
     CLOSED: [2016-08-14 日 01:06]
     - CLOSING NOTE [2016-08-14 日 01:06]
     使用各种CSS选择器来选择元素，如下为三种基本调用：
     1. 带#的ID，如$('#elementid')
     2. 带.的类名，如$('.element-class')
     3. 标签名，如$('tag')\\
     还有其他很多更精确的高级用法，如下：
     1. CSS选择器，如var links = $('article nav a');
     2. 库所提供的专有选择器，如$("tr:odd").addClass("odd");
     3. 使用回调函数筛选，即基于每个元素执行相应的筛选代码，如下代码：
	#+BEGIN_SRC js
          //jQuery库的回调筛选函数
          var singleImageAnchors = $('a').filter(function(){
              return ($('img',this).length == 1)
          });
	#+END_SRC
**** DONE 操作DOM元素
     CLOSED: [2016-08-15 一 11:27]
     - CLOSING NOTE [2016-08-15 一 11:27]
 1. 生成内容，把HTML代码作为$函数的参数传入，即可创建新的节点，如下代码：
    #+BEGIN_SRC js
      $('<div id="example">Hello</div>').appendTo(document.body);
    #+END_SRC
 2. 操作内容，DOM操作在任何一个库中都受到极大的重视，他们分别都提供了一些用于
    删除、插入、添加、前置等操作的快捷方法，如下代码：\\
    #+BEGIN_SRC js
      $('ul#list1 li').appendTo("ul#list2");
      //把list1的所有元素移动到list2中
      $('ul#list1 li').clone().appendTo("ul#list2");
      //把list1的所有元素复制到list2中
    #+END_SRC
**** DONE 处理事件
     CLOSED: [2016-08-15 一 12:02]
     - CLOSING NOTE [2016-08-15 一 12:02]
     事件其实是用户交互的根本所在
 1. 加载事件
    1. 以addLoadEvent事件为例，jQuery的ready方法以类似的方式实现了相应的机制：
       #+BEGIN_SRC js
         $(document).ready(handler);
         $(handler);
       #+END_SRC
 2. 其他事件
    1. 还有很多特定于元素的事件，例如blur、focus、click、dblclick、mouseover、
       mouseout和submit等
    2. 使用这些事件方法，可以为DOM元素批量注册事件处理函数，如下代码：
       #+BEGIN_SRC js
         $('a').click(function(event) {
             //在新窗口中打开当前href中的链接
             window.open(this.getAttribute('href'));
             //阻止链接的默认动作
             return false;
         })
       #+END_SRC
**** DONE Ajax
     CLOSED: [2016-08-15 一 18:04]
     - CLOSING NOTE [2016-08-15 一 18:04] \\
       Ajax是软肋，得专门找东西看才能明白！
 1. Prototype与Ajax
 2. jQuery与Ajax
**** DONE 动画和效果
     CLOSED: [2016-08-15 一 18:24]
     - CLOSING NOTE [2016-08-15 一 18:24]
 1. 基于CSS属性的动画
    * 动画的最基本形式，就是随着时间推移改变一个元素的CSS属性. 
 2. 组合动画
 3. 注意可访问性
**** DONE 小节
     CLOSED: [2016-08-15 一 18:24]
     - CLOSING NOTE [2016-08-15 一 18:24]
** 相关网站
 1. www.w3school.com.cn[
* jQuery
* React
* SQL/PHP
** 《SQL必知必会》
* Node.js
* C 
** DONE <The C programming Language>
** 《一站式学习C编程》
*** 简单函数
 1. main函数只有两种声明形式：标准形式int main(int argc, char *argv[])及int
   main(void)，其他写法都是错误的或不可移植的。
 2. 局部变量在每次函数调用时分配存储空间，在每次函数返回时释放存储空间。
 3. 全局变量在程序开始时分配存储空间，在程序结束时释放存储空间。
 4. 局部变量可以用类型相符的任意表达式来初始化，而全局变量只能用常量表达式来初
    始化。
 5. 如果全局变量在定义时不初始化则初始值是0,如果局部变量在定义时不初始化则初始
    值是不确定的。
 6. 在一个函数中可以声明另一个函数，但不能定义另一个函数，C语言不允许嵌套定义函
    数。
*** 分支语句
 1. 语句快（大括号内）中也可以定义局部变量。
 2. C语言规定，else总是和它上面最近的一个if配对。
 3. case后面跟的表达式必须是常量表达式，这个值和全局变量的初始值一样必须在编译
    时计算出来。
 4. switch语句虽然可以被if...else...语句代替，但是，有时候编译器会对switch语句
    做整体优化，使它比等价的if/else语句所生成的指令效率更高。
*** 深入理解函数
**** return语句
 1. 函数的返回值不是左值，或者说函数调用表达式不能做左值。
 2. 即便返回语句写成return x;，返回的也是变量x的值，而非变量x本身，因为变量x马
    上就要被释放了。
 3. 正负号的优先级和逻辑非运算符相同，比加减的优先级要高。
**** 增量式开
* Java
** 《Head First Java》
*** 类与对象
**** 编写类
   #+BEGIN_SRC java
   class Dog {
     int size;
     String breed;
     String name;

     void bark() {
       System.out.println("Ruff! Ruff!");
     }
   }
   #+END_SRC
**** 编写测试用的类
   #+BEGIN_SRC java
   class DogTestDrive {
     public static void main (String[] args) {
     //Dog测试码
     }
   }
   #+END_SRC
**** 在测试用的类中建立对象并存取对象的变量和方法
   #+BEGIN_SRC java
   class DogTestDrive {
     public static void main (String[] args) 
   {
       Dog d = new Dog(); //建立Dog对象
       d.size = 40;       //存取该对象的变量
       d.bark();          //调用它的方法
     }
   }
   #+END_SRC
** 《Java从入门到精通》
 1. 基本数据类型、变量与常量、基本运算符、流程控制等与C语言大体相似，可以参照C
   语法相关知识。
** JDEE配置
*** Collection of Emacs Development Environment Tools(CEDET)
*** Installing the Elisp Library
*** Installing the JDEE
** Linux下Java编程及调试（不用JDEE）
 1. 查看jdk版本$java -version，输出如下：
   openjdk version "1.8.0_72"\\
   OpenJDK Runtime Environment (build 1.8.0_72-b15)\\
   OpenJDK 64-Bit Server VM (build 25.72-b15, mixed mode)
 2. javac用不了，为何？
 3. 可能涉及环境变量的问题，暂时解决不了，所以重新安装了官方的JDK，可以正常运行
   了。
* Algorithm
* Git/Github
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2016-08-20 六 12:04]
| Headline                      | Time    |       |
|-------------------------------+---------+-------|
| *Total time*                  | *21:17* |       |
|-------------------------------+---------+-------|
| Git/Github                    | 21:17   |       |
| \_  DONE 《GitHub入门与实践》 |         | 13:41 |
| \_  《Pro Git》               |         |  7:36 |
#+END:
** DONE 《GitHub入门与实践》
   CLOSED: [2016-08-20 六 00:37] DEADLINE: <2016-08-17 三> SCHEDULED: <2016-08-04 四>
   :PROPERTIES:
   :Effort:   7:00
   :END:
   - CLOSING NOTE [2016-08-20 六 00:37] \\
     只看前五章即可，其他的章节可以以后查阅.
   #+BEGIN: clocktable :maxlevel 2 :scope subtree
   #+CAPTION: Clock summary at [2016-08-19 五 12:17]
   | Headline                      | Time    |       |
   |-------------------------------+---------+-------|
   | *Total time*                  | *13:41* |       |
   |-------------------------------+---------+-------|
   | \_  TODO 《GitHub入门与实践》 |         | 13:41 |
   #+END:
   :LOGBOOK:
   CLOCK: [2016-08-15 一 20:53]--[2016-08-15 一 22:24] =>  1:31
   :END:
*** DONE 第1章  欢迎来到GitHub的世界
    CLOSED: [2016-08-15 一 22:19]
    - CLOSING NOTE [2016-08-15 一 22:19] \\
      本章没什么实际的知识点，基本都是软文.
 1. GitHub是为开发者提供Git仓库的托管服务
 2. Pull Request、@用户名、Markdown、Issue、Wiki简介
*** DONE 第2章  Git的导入
    CLOSED: [2016-08-15 一 22:55]
    - CLOSING NOTE [2016-08-15 一 22:55]
    :LOGBOOK:
    CLOCK: [2016-08-15 一 22:29]--[2016-08-15 一 22:55] =>  0:26
    :END:
 1. 版本管理系统分集中型和分散型，Git属于分散型
 2. Fork出的仓库与原仓库是两个不同的仓库，开发者可以随意编辑，这个Fork出的仓库
    应该不会保持与最新仓库的同步.
**** 初始设置
 1. 设置姓名及邮箱地址
    1. $ git config --global user.name "John"
    2. $ git config --global user.email "hitzhzw3889@126.com"\\
    这两种信息会保存在~/.gitconfig文件中.
 2. 提高命令输出的可读性
    1. 将color.ui设置为auto:$ git config --global color.ui auto
    2. 此信息也将保存在~/.gitconfig文件中.
*** DONE 第3章  使用GitHub的前期准备
    CLOSED: [2016-08-16 二 00:50]
    - CLOSING NOTE [2016-08-16 二 00:50]
    :LOGBOOK:
    CLOCK: [2016-08-15 一 23:33]--[2016-08-16 二 00:50] =>  1:17
    :END:
**** 在github上创建账户
 1. 账号：zhzw3889
 2. 密码：***@******1**
**** 设置SSH Key
 1. $ ssh -keygen -t rsa -C "hitzhzw3889@126.com"
 2. 密码：******
**** 设置公开密钥
 1. cat ~/.ssh/id_rsa.pub查看公开密钥的内容
 2. 文件的内容为:ssh-rsa 公开密钥的内容 hitzhzw3889@126.com
 3. 把它粘贴到GitHub的Key部分\\
 公钥与私钥应该是配对正确才可使用的.
**** 创建仓库
**** 连接仓库
 * 仓库的URL为http://github.com/用户名/仓库名
**** 公开代码
 1. clone已有仓库
    1. git clone git@github.com:zhzw3889/Hello-World.git
    2. cd Hello-World
    3. git clone git://github.com/git/git
    4. cd clone
 2. 编写代码
 3. 提交
    1. git add hello_world.php
    2. git commit -m "Add hello world script by php"
    3. 通过git log查看提交日志
 4. 进行push
    1. git push
    2. 只要执行push，GitHub上的仓库就会被更新.
       push时应该可以选择目录的，否则结果如下，全都到:
       #+BEGIN_SRC sh
         00:38:57John>~/test$git push
         Enter passphrase for key '/home/John/.ssh/id_rsa': 
         对象计数中: 76, 完成.
         Delta compression using up to 4 threads.
         压缩对象中: 100% (70/70), 完成.
         写入对象中: 100% (76/76), 43.85 KiB | 0 bytes/s, 完成.
         Total 76 (delta 36), reused 0 (delta 0)
         remote: Resolving deltas: 100% (36/36), done.        
         To git@github.com:zhzw3889/learningnotes.git
         7db5f05..e8a781c  master -> master
       #+END_SRC
*** DONE 第4章  通过实际操作学习Git
    CLOSED: [2016-08-17 三 00:07]
    - CLOSING NOTE [2016-08-17 三 00:07] \\
      基本理解了Git的机理，更细节深入的操作以后可以在实践中加深.
    :LOGBOOK:
    CLOCK: [2016-08-16 二 22:16]--[2016-08-17 三 00:07] =>  1:51
    CLOCK: [2016-08-16 二 19:41]--[2016-08-16 二 22:01] =>  2:20
    CLOCK: [2016-08-16 二 17:39]--[2016-08-16 二 18:19] =>  0:40
    CLOCK: [2016-08-16 二 15:55]--[2016-08-16 二 17:22] =>  1:27
    CLOCK: [2016-08-16 二 09:37]--[2016-08-16 二 11:01] =>  1:24
    :END:
**** 基本操作
 1. git init——初始化仓库
    1. $ mkdir git-tutorial
    2. $ cd git-tutorial
    3. $ git init
 2. git status——查看仓库状态
    1. $ git status
 3. git add——向暂存区中添加文件
    暂存区是提交之前的一个临时区域.
    1. git add readme.md
    2. git status
 4. git commit——保存仓库的历史记录
    1. 记述一行提交信息：git commit `[-m "commit information"]
    2. 记述详细提交信息：git commit，貌似不起作用
    3. 中止提交：提交信息留空或直接关闭编辑器
 5. git log——查看提交日志
    1. 只显示提交信息的第一行：git log --pretty=short
    2. 只显示制定目录、文件的日志：git log readme.md
    3. 显示文件的改动：git log -p
 6. git diff——查看更改前后的差别
    1. 查看工作树和暂存区的差别：git diff
    2. 查看工作树和最新提交的差别：git diff HEAD
**** 分支的操作
 1. git branch——显示分支一览表
 2. git checkout -b——创建、切换分支
    1. git checkout -b feature-A，创建feature-A并切换到此分支，如下两条命令也
       起到同样效果：
       #+BEGIN_SRC git
       git branch feature-A
       git checkout feature-A
       #+END_SRC
    2. 切换到master分支：git checkout master
    3. 切换回上一个分支：git checkout -
 3. 特性分支\\
    基于特性主题的作业在特性分支中进行，主题完成后再与master分支合并.
 4. 主干分支\\
    主干分支是特性分支的原点，同时也是合并的终点，通常人们会用master分支作为主
    干分支.
 5. git merge——合并分支
    1. git checkout master
    2. git merge --no-ff feature-A，--no-ff参数是为了在历史记录中明确记录下本
       次分支合并.
    3. 合并成功后不用再次合并，只要在master上commit就可以了.(自)
 6. git log --graph——以图表形式查看分支
**** 更改提交的操作
 1. git reset——回溯历史版本\\
    让仓库的HEAD、暂存区、当前工作树回溯到指定状态.
    1. 回溯到创建feature-A分支前：git reset --hard 哈希值
    2. 创建fix-B分支：git checkout -b fix-B
    3. 推进至feature-A分支合并后的状态：git reflog查看当前仓库的操作日志，在日
       志中找出回溯历史之前的哈希值为06781cc，以下命令为：
       #+BEGIN_SRC git
       git checkout master
       git reset --hard 06781cc
       #+END_SRC
 2. 消除冲突
    1. 查看冲突部分并将其解决：直接在编辑器中修改即可
    2. 提交解决后的结果：在master中add、commit
 3. git commit --amend——修改提交信息
    1. 在emacs里的shell-mode中打不开git编辑器，而在终端中可以，而且默认是vim模
       式，可能是这个原因，只要我把git的编辑器设置成emacs模式应该就可以用
       了.(自)
 4. git rebase -i——压缩历史
    1. 创建feature-C分支:\\
       git checkout -b feature-C\\
       git commit -am "Add feature-C"
    2. 修正拼写错误\\
       修改后运行:git diff查看结果，然后提交：git commit -am "Fix typo"
    3. 更改历史\\
       把"Fix typo"与前一次的提交合并：git rebase -i HEAD~2，把第二个pick修改
       为fixup，查看git log --graph为已修改
    4. 合并至master分支\\
       #+BEGIN_SRC git
       git checkout master
       git merge --no-ff feature-C
       #+END_SRC
**** 推送至远程仓库
 1. git remote add——添加远程仓库
    1. GitHub上创建的仓库路径为"git@github.com:用户名/git-tutorial.git"
    2. 将其设置成本地仓库的远程仓库：
       #+BEGIN_SRC git
       git remote add origin git@github.com:zhzw3889/git-tutorial.git
       #+END_SRC
       远程仓库名称被设置为origin，以后推送只要指定此名称即可.
 2. git push——推送至远程仓库
    1. 推送至master分支：git push -u origin master
    2. -u参数是为了将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分
       支就可以直接从origin的master分支获取内容.
    3. 推送至master以外的分支
       #+BEGIN_SRC git
       git checkout -b feature-D
       git push -u origin feature-D
       #+END_SRC
**** 从远程仓库获取
 1. git clone——获取远程仓库
    1. 在home下创建test-clone&pull目录，并且git init
    2. 在此目录下执行：git clone git@github.com:zhzw3889/git-tutorial.git
    3. cd git-tutorial
    4. git branch -a，同时显示本地仓库和远程仓库的分支信息
    5. 将feature-D分支获取至本地仓库：git checkout -b feature-D origin/feature-D
    6. 向本地的feature-D分支提交更改，添加一行"- feature-D"，再查看变更并提交：\\
       git diff\\
       git commit -am "Add feature-D"
    7. 推送feature-D分支：git push
 2. git pull——获取最新的远程仓库分支
    1. 回到原来目录：cd ~/git-tutorial
    2. git branch发现多了个*feature-D分支
    3. 将本地的feature更新到最新状态：git pull origin feature-D
**** 帮助大家深入理解Git的资料
 1. Pro Git
 2. *learnGitBranching* ，网站不错
 3. try Git
*** DONE 第5章  详细解说GitHub的功能
    CLOSED: [2016-08-19 五 12:15]
    - CLOSING NOTE [2016-08-19 五 12:15] \\
      本章只是一个大致的介绍，细节功能还得在使用中慢慢体会.
    :LOGBOOK:
    CLOCK: [2016-08-19 五 10:29]--[2016-08-19 五 12:15] =>  1:46
    CLOCK: [2016-08-19 五 08:26]--[2016-08-19 五 09:13] =>  0:47
    :END:
**** 键盘快捷键:shift+/
**** 工具栏
**** 控制面板
**** 个人信息
**** 仓库
**** Issue
**** Pull Request
**** Wiki
**** Pulse
**** Graphs
**** Network
**** Settings
**** Notifications
**** 其他功能
*** 第6章  尝试Pull Request
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 第7章  接受Pull Request
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 第8章  与GitHub相互协作的工具及服务
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 第9章  使用GitHub的开发流程
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 第10章 将GitHub应用到企业
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 附录A  支持GitHub的GUI客户端
    - CLOSING NOTE [2016-08-17 三 22:52]
*** 附录B  通过Gist轻松实现代码共享
    - CLOSING NOTE [2016-08-17 三 22:52]
*** TODO 复习
    :LOGBOOK:
    CLOCK: [2016-08-17 三 10:33]--[2016-08-17 三 10:45] =>  0:12
    :END:
** 《Pro Git》
#+BEGIN: clocktable :maxlevel 2 :scope subtree
#+CAPTION: Clock summary at [2016-08-20 六 12:04]
| Headline        | Time   |      |
|-----------------+--------+------|
| *Total time*    | *7:36* |      |
|-----------------+--------+------|
| \_  《Pro Git》 |        | 7:36 |
#+END:
*** 查阅
    :LOGBOOK:
    CLOCK: [2016-08-17 三 22:50]--[2016-08-17 三 22:58] =>  0:08
    :END:
*** DONE 起步
    CLOSED: [2016-08-18 四 23:18]
    - CLOSING NOTE [2016-08-18 四 23:18]
    :LOGBOOK:
    CLOCK: [2016-08-17 三 22:58]--[2016-08-17 三 23:08] =>  0:10
    :END:
**** 关于版本控制
**** Git基础要点
**** 安装Git
**** 初始运行Git前的配置
 1. 用户信息
 2. 文本编辑器：git config --global core.editor emacs
 3. 差异分析工具：git config --global merge.tool vimdiff
 4. 查看配置信息：git config --list
**** 获取帮助
 1. git help <verb>
 2. git <verb> --help
 3. man git-<verb>
*** DONE Git基础
    CLOSED: [2016-08-18 四 23:18]
    - CLOSING NOTE [2016-08-18 四 23:18]
    :LOGBOOK:
    CLOCK: [2016-08-18 四 21:39]--[2016-08-18 四 23:14] =>  1:35
    CLOCK: [2016-08-18 四 19:18]--[2016-08-18 四 20:51] =>  1:33
    CLOCK: [2016-08-17 三 23:34]--[2016-08-18 四 01:30] =>  1:56
    :END:
**** 取得项目的Git仓库
 1. 从当前目录初始化：git init
 2. 从现有仓库克隆：git clone [url]
**** 记录每次更新到仓库
 1. 查看当前文件状态：git status
 2. 跟踪新文件：git add file/dir
 3. 暂存已修改文件：git add file/dir
 4. 忽略某些文件： 新建.gitignore文件
 5. 查看已暂存和未暂存的更新：
    1. git diff，暂存的和修改但为暂存的
    2. git diff --cached/staged，此次暂存的和上次提交的
 6. 提交更新：git commit [-m] ["说明"]
 7. 跳过使用暂存区域：git commit -a，可以和上面的合并使用
 8. 移除文件(从暂存区域)：git rm
 9. 移动文件：git mv file_from file_to
**** 查看提交历史
 1. 列出所有更新：git log
 2. 展开显示每次提交的内容差异：git log -p
 3. 仅显示最近两次更新：git log -2
 4. 仅显示简要的增改行数统计：git log --stat
 5. 指定使用完全不同于默认格式的方式展示提交历史：--pretty，如：\\
    git log --pretty=oneline\\
    git log --pretty=format:"%h -% an, %ar : %s"
 6. 以ASCII图形的方式显示：git log --graph
 7. 限制输出长度(时间段)：--since和--until，如：\\
    git log --since=2.weeks\\
    --author 仅显示指定作者相关的提交\\
    --committer 仅显示指定提交者相关的提交
 8. 使用图形化工具查阅提交历史：gitk
**** 撤销操作
 1. 修改最近一次提交：git commit --amend
 2. 取消已经暂存的文件：git reset HEAD <file>...
 3. 取消对文件的修改：git checkout -- <file>...
 4. 记住，任何提交到git的都可以被恢复，即便在已删除的分支中的提交或者用--amend
    重新改写的提交.可能失去的数据仅限于没有提交过的，对Git来说它们好像从未存在
    过一样.
**** 远程仓库的使用
 1. 查看当前的远程库：git remote
 2. -v选项(verbose简写)，显示对应的克隆地址
 3. 添加远程仓库：git remote add [shortname] [url]
 4. 从远程仓库抓取数据：git fetch [remote-name]\\
    远程仓库领先于本地仓库时：git push myNotes master
 5. 推送数据到远程仓库：git push [remote-name] [branch-name]\\
    $ git push origin master
 6. 查看远程仓库信息：git remote show [remote-name]\\
    $ git remote show myNotes
 7. 远程仓库的删除和重命名：\\
    重命名：git remote rename [old-name] [new-name] \\
    删除：git remote rm
**** 打标签
 1. 列显已有的标签：git tag
 2. 新建标签：轻量级的(lightweight)和含附注的(annotated)
 3. 含备注的标签：-a \\
    git tag -a v1.4 -m 'my version 1.4'\\
    查看标签：git show v1.4
 4. 签署标签：-a换成-s
 5. 轻量级标签：git tag v1.4-lw
 6. 验证标签：git tag -v [tag-name]
 7. 后期加注标签：git tag -a v1.2 9fceb02
 8. 共享标签：git push origin [tagname]\\
    一次推送所有(本地新增的)标签：git push origin --tags
**** 技巧和窍门
 1. 自动完成
 2. Git命令别名
*** DONE Git分支
    CLOSED: [2016-08-20 六 18:34]
    - CLOSING NOTE [2016-08-20 六 18:34]
    :LOGBOOK:
    CLOCK: [2016-08-20 六 16:09]--[2016-08-20 六 18:34] =>  2:25
    CLOCK: [2016-08-20 六 09:50]--[2016-08-20 六 12:04] =>  2:14
    :END:
**** 何为分支 
 1. Git中的分支，其实本质上仅仅是个指向commit对象的可变指针.
 2. HEAD在Git中是一个指向你正在工作中的本地分支的指针.
 3. git checkout master这条命令做了两件事，它把HEAD指针移回到master分支，并把
    工作目录中的文件换成了master分支所指向的快照内容.
 4. 新建一个分支就是向一个文件写入41个字节(外加一个换行符)那么简单.
 5. Git每次提交时都记录了祖先信息，所以以后要合并分支时，寻找恰当的合并基础(即
    共同祖先)的工作其实已经完成了一大半，实现起来非常容易.
**** 基本的分支与合并
 1. 基本分支
    1. 转换分支的时候最好保持一个清洁的工作区域.
    2. git checkout -b iss53的功能相当于下面两条命令：\\
       git branch iss53\\
       git checkout iss53\\
       注意：这里新建的分支都是在原来的分支的基础上建立的新分支，而不一定都是
       master上的新建分支，这取决于git branch之前在什么分支上.
    3. 合并之后的分支可以用如下命令删除：\\
       git branch -d branch-name
    4. 当切换回某分支时，Git会把工作目录的内容恢复为checkout时它所指向的那个
       commit快照.它会自动添加、删除和修改文件以确保目录的内容和你上次提交时完
       全一样.
 2. 基本合并
    1. 合并的步骤如下：\\
       git checkout branch-to-merge-into(master)\\
       git merge branch-to-merge-in
    2. 当master分支所指向的commit并非想要并入分支的直接祖先时，Git会用两个分支
       的末端和它们的共同祖先进行一次简单的三方合并计算，并对三方合并的结果作
       一新的快照，并自动创建一个指向它的commit，而且，Git可以自己裁决哪个共同
       祖先才是最佳合并基础.
 3. 冲突的合并
    1. 当发生合并冲突时可以用git status查阅
    2. "======"上下两部分为冲突的文件内容，修改后删除包含如下标记的三行文本：
       1. ========
       2. <<<<<<<<
       3. >>>>>>>>
    3. 也可用git mergetool命令调用可视化的合并工具
    4. 用git commit完成此次的合并提交
 4. 分支管理
    1. git branch，列出当前所有分支清单
    2. git branch -v，查看各个分支最后一次commit信息
    3. git branch --merge/--no-merge，筛选出已经/尚未与当前分支合并的分支
    4. 已经合并的分支可以用git branch -d来删掉
    5. 尚未合并的分支可以用-D强制删除，如git branch -D branch-name
**** 分支式工作流程
 1. 长期分支
 2. 特性分支
    1. 一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支.
    2. 该技术允许你迅速且完全的进行语境切换——因为你的工作分散在不同的流水线里，
       每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单
       了.
    3. 在工作中可以大胆使用测试分支.（自）
**** 远程分支
 1. 远程分支(remote branch)是对远程仓库状态的索引.它们是一些无法移动的本地分支，
    只有在进行Git的网络活动时才会更新.
 2. 只要不和服务器通讯，origin/master指针就不会移动.
 3. git add add把远程仓库加为当前项目的远程分支之一.
 4. 可以用git fetch (仓库名) 来获取本地没有的数据.
 5. 推送
    1. 你的本地分支不会被自动同步到你引入的远程分支中，除非你明确执行推送操作.
    2. git push (远程仓库名) (分支名)
 6. 跟踪分支(tracking branch)
    1. 从远程分支检出的本地分支，称为跟踪分支.
    2. 跟踪分支是一种和远程分支有直接联系的本地分支，在跟踪分支里输入git push，
       Git会自行推断应该向哪个服务器的哪个分支推送数据.
    3. 在克隆仓库时，Git通常会自动创建一个master分支来跟踪origin/master，这才是
       git push和git pull一开始就能正常工作的原因.
    4. 在本地分支设定不同于远程分支的名字：git checkout -b sf origin/serverfix
 7. 删除远程分支
    1. git push [远程名] ：[分支名]，注意有个空格键
    2. 如想在服务器上删除serverfix分支：git push origin :serverfix
**** 衍合(rebase)
 1. 衍合基础
    1. 把当前分支branch1衍合入master分支，用如下步骤：\\
       git checkout branch1\\
       git rebase master\\
    2. 衍合能产生一个更为整洁的提交历史
    3. 合并结果中最后一次提交所指向的快照，无论是通过一次衍合还是一次三方合并，
       都是同样的快照内容，只是提交的历史不同罢了.
 2. 更多有趣的衍合——有点复杂，以后再看
 3. 衍合的风险——一句话，永远不要衍合那些已经推送到公共仓库的更新.
*** 服务器上的Git
*** 分布式Git
*** Git工具
*** 自定义Git
*** Git与其他系统
*** Git内部原理
**** Git基础要点
 1. 
 2. 
 3. 
 4. 
** 其他
*** 初始配置
    |------+---------------------------------------+-----------------------|
    | 序号 | 命令                                  | 作用                  |
    |------+---------------------------------------+-----------------------|
    |    1 | git config --global core.editor emacs | 把默认编辑器设成emacs |
    |      |                                       |                       |
    
* 慕课网
** DONE Linux Guide for Developers
   CLOSED: [2016-08-10 三 18:58]
   - CLOSING NOTE [2016-08-10 三 18:58] \\
     只是些基础的内容，但是对于前端应该不需要太过追求！
   :LOGBOOK:
   CLOCK: [2016-08-10 三 15:38]--[2016-08-10 三 18:57] =>  3:19
   :END:
*** DONE 课程介绍
    CLOSED: [2016-08-10 三 11:14]
    - CLOSING NOTE [2016-08-10 三 11:14]
*** DONE 你好，命令行 
    CLOSED: [2016-08-10 三 11:23]
    - CLOSING NOTE [2016-08-10 三 11:23]
 1. man command，之后输入/可以搜索参数如-r等
*** DONE 在文件系统中跳转
    CLOSED: [2016-08-10 三 11:34]
    - CLOSING NOTE [2016-08-10 三 11:34]
 1. pwd命令，打印当前目录
 2. ls命令，列出文件
 3. 绝对路径以/开头，相对路径以.和..开头
 4. cd命令，Change (working) Dir
*** DONE 操作文件和目录
    CLOSED: [2016-08-10 三 16:26]
    - CLOSING NOTE [2016-08-10 三 16:26]
 1. 走马观花看命令
    |------+-------+-----------------+----------------------------|
    | 序号 | 命令  | 格式            | 操作                       |
    |------+-------+-----------------+----------------------------|
    |    1 | cp    | cp file1 file2  | 拷贝文件(copy)             |
    |      |       | cp -r dir1 dir2 | 拷贝目录                   |
    |------+-------+-----------------+----------------------------|
    |    2 | mv    | mv file ..      | 移动文件到上一级目录(move) |
    |      |       | mv file dir/    | 移动到当前的dir目录        |
    |      |       | mv file1 file2  | 重命名文件(rename)         |
    |      |       | mv dir1 dir2    | 重命名目录                 |
    |------+-------+-----------------+----------------------------|
    |    3 | rm    | rm file         | 删除文件(remove)           |
    |      |       | rm -r dir       | 删除目录                   |
    |------+-------+-----------------+----------------------------|
    |    4 | touch | touch file      | 创建文件                   |
    |    5 | mkdir | mkdir dir       | 创建目录                   |
    |    6 | cat   | cat file        | 查看文件                   |
    |    7 | file  | file file       | 查看文件类型               |
    |------+-------+-----------------+----------------------------|
 2. 通配符
    1. *
 3. 打包压缩
    | 序号 | 命令  | 格式                       | 操作                      |
    |------+-------+----------------------------+---------------------------|
    |    1 | zip   | zip file                   | 压缩文件                  |
    |      | unzip | zuzip file.zip             | 解压缩文件                |
    |------+-------+----------------------------+---------------------------|
    |    2 | tar   | tar zcvf file.tar.gz dir/  | 将dir压缩为file.tar.gz    |
    |      |       | tar zxvf file.tar.gz       | 解压缩文件                |
    |------+-------+----------------------------+---------------------------|
    |    3 | tar   | tar jcvf file.tar.bz2 dir/ | 将dir目录压缩file.tar.bz2 |
    |      |       | tar jxvf file.tar.bz2      | 解压缩file文件            |
    |------+-------+----------------------------+---------------------------|
*** DONE 重定向
    CLOSED: [2016-08-10 三 16:45]
    - CLOSING NOTE [2016-08-10 三 16:45]
 1. 三个重要文件
    1. 文件描述符(file descriptor)
       |----+----------------------|
       | 值 | 文件种类             |
       |----+----------------------|
       |  0 | stdio，标准输入文件  |
       |  1 | stdout，标准输出文件 |
       |  2 | stderr，标准错误文件 |
       |----+----------------------|
 2. 拐弯(重定向)的各种方式
    1. redirect stdout，输出重定向，>
    2. redirect stderr，错误输出重定向，2>
    3. redirect stdin，输入重定向，<
 3. 管道
    1. 格式为command1|command2|command3
*** DONE 用户和文件权限
    CLOSED: [2016-08-10 三 17:02]
    - CLOSING NOTE [2016-08-10 三 17:02]
 1. 三种权限
    1. reading,r
    2. writing,w
    3. executing,x
 2. 文件模式(file mode)
    + 即"ls -l file"后首列的"-rw-rw-r--"
 3. chmod
    + 用法如chmod 666 file，其中6为rwx真值表的八进制数
*** DONE 进程
    CLOSED: [2016-08-10 三 17:30]
    - CLOSING NOTE [2016-08-10 三 17:30]
 1. 获取进程号
    1. PID(Process ID)
    2. ps aux|less
    3. ps aux|grep vim
 2. 后台执行
    1. 不占据当前shell
    2. firefox &
 3. kill
    1. kill -9 PID
    2. 当卡死时，可以到其他工作台关闭进程 
*** DONE 查找
    CLOSED: [2016-08-10 三 17:48]
    - CLOSING NOTE [2016-08-10 三 17:48]
 1. locate，全局查找
    1. locate vimrc
    2. 不能搜到新建文件
    3. 需要手动运行updatedb命令，默认一天执行一次
 2. find，当前目录查找
    1. find .|grep .txt，查找当前目录的所有txt文件
    2. find . -type f，只查找文件
    3. find . -type d，只看到目录
 3. grep
*** DONE 网络操作
    CLOSED: [2016-08-10 三 17:56]
    - CLOSING NOTE [2016-08-10 三 17:56] \\
      略看
 1. ssh
 2. rsync
*** DONE 安装软件
    CLOSED: [2016-08-10 三 18:11]
    - CLOSING NOTE [2016-08-10 三 18:11]
 1. 手动安装
 2. deb包，ubuntu中装包：sudo dpkg -i *.deb
 3. 从apt-get仓库安装
    1. 安装：apt-get install 
    2. 卸载：apt-get remove，如果要一并删除配置文件则为：apt-get purge
*** DONE 轻触shell脚本编程
    CLOSED: [2016-08-10 三 18:55]
    - CLOSING NOTE [2016-08-10 三 18:55]
 1. 指定解析器 
    1. 首行加#!/usr/bin/env bash
 2. 语句即命令
    1. 如echo "hello"等命令直接罗列
 3. 位置参数
    1. $#，参数总数
    2. $0，脚本程序名
    3. $1，第一个参数
    4. $2，第二个参数
 4. 脚本不在当前shell执行
    1. 如要使其在当前shell执行用source命令
 5. 循环控制\\
    把文件加后缀.txt，$1为目录参数，脚本如下：
    #+BEGIN_SRC sh
    #!/usr/bin/env bash
    cd $1
    echo I am in `pwd`
    for file in `ls`
    do
      mv $file $file.txt
    done
    #+END_SRC
 6. 远程执行
 7. 确认执行\\
    代码为：
    #+BEGIN_SRC sh
    echo -n "Want to sync? (y/n): "
    read AAA
    if ["${AAA:-y}" = "y"]; then
       sync_server
    else 
       echo Nothing done, bye.
    fi
    #+END_SRC
 8. 其他语言写脚本
*** DONE Goodbye
    CLOSED: [2016-08-10 三 18:57]
    - CLOSING NOTE [2016-08-10 三 18:57]
    - http://beijinglug.org/
** 
* 复习
  :LOGBOOK:
  CLOCK: [2016-08-24 三 07:53]--[2016-08-24 三 08:19] =>  0:26
  :END:
